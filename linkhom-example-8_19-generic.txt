// 8_19 Generic ///////////////////////////////////////////

// You pass in a state number via the command line and we compile it, and
// output the single compilation to a file

// i.e. Singular -c "int state = 14;" linkhom-example-8_19-generic.txt

option(noredefine);option(noloadLib);option(redSB);//option(prot);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
LIB "control.lib";
LIB "mfweb.lib";
ring rr=0,(x(1..16)),dp;
int N = 3; // The N in sl(N) link homology
printlevel = 1;

list linkL = linkLibrary("8_19");

if( !defined(state) )
{
    print("You must set a state vector.");
    exit;
}

int webSiz = size(linkL[1]);
list edgeList = linkL[2];
list stateDiagrams = powervec(webSiz);
int numStateDiagrams = size(stateDiagrams);

// Our state diagram
intvec v = stateDiagrams[state];

string filen = "./data/8_19-N" + string(N) + "-state" + intvecToString(v) + ".mp";
// e.g. 8_19-N3-state1111111.mp

// The compilation strategy is the same for all webs: we simply compile from the 1st
// vertex to the last one, and enumerate the variables in the given order (note that
// all the ring variables are taken as internal variables)
list compStratVert;
list compStratVar;
int j;
for(j=1;j<=size(edgeList); j++)
{
    compStratVert[j] = j;
}
for(j=1;j<=nvars(basering);j++)
{
    compStratVar = compStratVar + list(var(j));
}
list compStrat = compStratVert,compStratVar;

dbprint(printlevel, "");
dbprint(printlevel, "[linkCompile] Looking at state [" + string(v) + "] which is number [[ " + string(state) + "/" + string(numStateDiagrams) + " ]].");
        
string listName = "compiled" + intvecToString(v); // compilation product
string listName2 = "web" + intvecToString(v); // web
        
dbprint(printlevel, "[linkCompile] Currently used memory: " + string(memory(0) div 1024) + "kb."); 
        
// Build a web suitable for calling webCompile
list web = webFromLink(linkL, v, N);
            
execute("list " + listName2 + " = web;");
            
// Call webCompile
execute("list " + listName + " = webCompile(web, compStrat);");
            
// Save the results to the savefile
dbprint(printlevel, "[linkCompile] Saving to disk.");

execute("writeObjectToFile(filen,\"" + listName + "\"," + listName + ");");
execute("writeObjectToFile(filen,\"" + listName2 + "\"," + listName2 + ");");

exit;