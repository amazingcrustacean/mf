//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE 1 (identity defect acting on (x,x^4))
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "matrix.lib";
int nx=1;
int ny=1;
ring rr=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(5);
poly minpolyblow = x(1)^4+x(1)^3+x(1)^2+x(1)+1;

int baa=5;
poly W = x(1)^baa;

// Define X, Y and D = Y x X:

matrix fY[1][1] = y(1)-x(1); 
matrix gY[1][1] = (y(1)^5 - x(1)^5)/(y(1)-x(1));
matrix fX[1][1] = x(1); 
matrix gX[1][1] = x(1)^4;
matrix fD = MFtensorF(fY,gY,fX,gX);
matrix gD = MFtensorG(fY,gY,fX,gX);
matrix n1[1][1];
matrix n2[2][2];
matrix X = blockmat(n1,gX,fX,n1);
matrix Y = blockmat(n1,gY,fY,n1);
matrix D = blockmat(n2,gD,fD,n2);

// This is dQ_X: 

matrix dq = dQ(X, W, nx, baa);
print(dq);

// "iddQ" is "id x dQ_X":

matrix iddQ = tensor(unitmat(2), dq); 
print(iddQ);

// This is deltaQ_D:

matrix delQ = deltaQ(D, W, nx, baa);
print(delQ);

// This is e' (modulo prefactor):

matrix e = iddQ * delQ;
print(e);


//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE 2 (2-variable example, defect is not the identity defect!)
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "matrix.lib";
int nx=2;
int ny=2;
ring rr=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(5);
poly minpolyblow = x(1)^4+x(1)^3+x(1)^2+x(1)+1;

int baa=5;
poly W = x(1)^baa + x(2)^baa;

// Define X, Y and D = Y x X:

matrix X[2][2] = 0, x(1) + r^2 * x(2), (x(1)^baa + x(2)^baa)/(x(1) + r^2 * x(2)), 0;
matrix Y1[2][2] = 0, x(1) + r^3 * x(2), -(x(1)^baa + x(2)^baa)/(x(1) + r^3 * x(2)), 0;
matrix Y2[2][2] = 0, y(1) + r^4 * y(2), (y(1)^baa + y(2)^baa)/(y(1) + r^4 * y(2)), 0;
matrix Y = MFtensor(Y1, Y2);
matrix D = MFtensor(Y, X);

// This is dQ_X: 

matrix dq = dQ(X, W, nx, baa);
print(dq);

// "iddQ" is "id x dQ_X":

matrix iddQ = tensor(unitmat(4), dq); 
print(iddQ);

// This is deltaQ_D:

matrix delQ = deltaQ(D, W, nx, baa);
print(delQ);

// This is e' (modulo prefactor):

matrix e = iddQ * delQ;
print(e);


