option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
LIB "control.lib";
LIB "inout.lib";
ring rr=(0,q,t),(x),dp;
int N = 2; // The N in sl(N) link homology
printlevel = 1;
timer;

// Define the underlying web of the trefoil
intvec edgevec(1) = 2,1,3,4;
intvec edgevec(2) = 4,3,5,6;
intvec edgevec(3) = 6,5,1,2;

// Define which vertices are overcrossings (+1) and which are undercrossings (-1):
intvec vertexParity = -1,-1,-1;

// Define the link as a list (see linkhom.lib preceding mfCompileLink)
list trefoilLink = vertexParity, list(edgevec(1),edgevec(2),edgevec(3));

// Compile all webs, first the first four, then the last four.
// Of course, we do not have to do this in the N=2 example, as 
// mfCompileLink would do it quickly (instead of reading it from
// the data file), this is just for illustration:
mfCompileAllWebs(trefoilLink, "./data/trefoil-N" + string(N) + ".mp", N, 1, 4);
mfCompileAllWebs(trefoilLink, "./data/trefoil-N" + string(N) + ".mp", N, 5, 8);

// Compute the euler characteristic, from trefoil-data
list h = mfCompileLink(trefoilLink, "./data/trefoil-N" + string(N) + ".mp", N);timer;
list cp = KRcomplex(trefoilLink, h);
list cohom = computeCohomology(cp);
number euler = gradedEuler(cohom,q);

// The Jones polynomial is -q9 + q5 + q3 + q, and
-q9 + q5 + q3 + q == euler;

// The KR homology is described by its Poincare polynomial
number poincare = gradedPoincare(cohom, q, t);
poincare;
