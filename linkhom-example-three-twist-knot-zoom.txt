option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
LIB "control.lib";
LIB "mfweb.lib";
ring rr=0,(x(1..10)),dp;
int N = 2; // The N in sl(N) link homology
printlevel = 1;

// Define the underlying web of the trefoil
intvec edgevec(1) = 10,3,2,1;
intvec edgevec(2) = 2,1,9,4;
intvec edgevec(3) = 6,4,5,3;
intvec edgevec(4) = 5,7,6,8;
intvec edgevec(5) = 9,8,10,7;

// Define which vertices are overcrossings (+1) and which are undercrossings (-1):
intvec vertexParity = -1,-1,-1,-1,-1;

// Define the link as a list (see linkhom.lib preceding mfCompileLink)
list threeTwist = vertexParity, list( edgevec(1),edgevec(2),edgevec(3),edgevec(4),edgevec(5) );

// Compute the euler characteristic:
list h = linkCompile(threeTwist, "./data/three-Twist-N" + string(N) + "-zoom.mp", N);

list cp = KRcomplex(threeTwist, h);

ring ss=(0,q,t),(x),dp;
list cp = imap(rr,cp);
list cohom = computeCohomology(cp);
number euler = gradedEuler(cohom,q);
euler;

// The KR homology is described by its Poincare polynomial
number poincare = gradedPoincare(cohom, q, t);
poincare;

// N = 2 invariants
//
// Jones: 



// Running the above code with the state of things on 26/9/10 yields
// the following.

// N = 2 invariants:
//
// P_2: 
// KR polynomial: 

// N = 3 invariants:
// 
// P_3: 
// KR polynomial: 
