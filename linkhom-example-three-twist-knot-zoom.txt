option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
LIB "control.lib";
LIB "mfweb.lib";
ring rr=0,(x(1..10)),dp;
int N = 3; // The N in sl(N) link homology
printlevel = 1;

// NOTE: There was a problem with the old definition of the link, either the edges
// weren't oriented in the right order, or the parity of the crossings was wrong.
// In any case this is what was responsible for the later failures, when I wrote out
// the edgelist and vertexparity myself it went through. This version of the link
// has been added to the "link library".
list threeTwist = linkLibrary("three-twist");

// Compute the euler characteristic (this takes a few minutes):
list h = linkCompile(threeTwist, "./data/three-Twist-N" + string(N) + "-zoom.mp", N);

list cp = KRcomplex(threeTwist, h);

ring ss=(0,q,t),(x),dp;
list cp = imap(rr,cp);
list cohom = computeCohomology(cp);
number euler = gradedEuler(cohom,q);
euler;

// The KR homology is described by its Poincare polynomial
number poincare = gradedPoincare(cohom, q, t);
poincare;

// N = 2 invariants:
//
// Jones polynomial: (q12+q8+q6-1)/(q18)
// KR polynomial: (q12+q10t+q10+q8t2+q6t2+q4t4+q4t3+t5)/(q18)

// N = 3 invariants:
// 
// P_3: 
// KR polynomial: 
