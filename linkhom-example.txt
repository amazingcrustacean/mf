/////////////////////////////////////////////
// Generic example of unreduced KR homology
/////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "linkhom.lib";

list linkData = linkLibrary("figure-eight"); // e.g. trefoil, 6_1, 6_2, see linkhom.lib/linkLibrary
int numVar = linkNumberOfVariables(linkData); // number of ring variables required
ring rr=0,(x(1..numVar)),dp; // we work over the ring Q[x(1),...,x(numVar)]
int N = 2; // The N in sl(N) link homology
printlevel = 1; // Turn on debugging output

list h = linkCompile(linkData, "./temp.txt", N); // Output data constructs to temp.mp
list cp = KRcomplex(linkData, h, N); // Compute KR complex from compilation h

ring ss=(0,t,q),(x),dp; // Switch to a ring with parameters t,q for Poincare polynomial

list cp = imap(rr,cp);
list cohom = computeCohomology(cp);
number poincare = gradedPoincare(cohom, q, t);
poincare; // KR homology, encoded as the Poincare polynomial

/////////////////////////////////////////////
// Generic example of reduced KR homology
/////////////////////////////////////////////
