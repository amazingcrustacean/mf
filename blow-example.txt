/////////////////////////////////////////////////////////////////////////////
// Examples of defect fusion, pushforwards, etc. using blow.lib and mfweb.lib
//
// A series - Computing a boundary-defect fusion three ways, using fuseDefects,
//          mfPushforward and webCompilePair. The last reduces, internally, to
//          mfPushforward, but fuseDefects is a distinct code base. It is likely
//          that mfPushforward will be faster in general than fuseDefects.
//
// H series - Computing Hom spaces using fuseDefects. The point is that the answers
//          can be compared with independent calculations in the stable category of MFs.

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE A1 - Tensoring (x,x2) with a factorisation of y^5 - x^3
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
ring rr=0,(x(1),y(1)),dp;
poly W = x(1)^3;
poly V = y(1)^5 - x(1)^3;

matrix X[2][2] = 0, x(1)^2, x(1), 0; // X is a MF of W

// Y is a factorisation of V, which we consider as a functor between MF(W) and MF(y(1)^5).
// We want to compute the image of X under this functor, that is, the fusion of Y and X.
matrix Y0[2][2] = -x(1), y(1), -y(1)^4, x(1)^2;
matrix Y1[2][2] = x(1)^2, -y(1), y(1)^4, -x(1);
matrix z[2][2];
matrix Y = blockmat(z,Y1,Y0,z);

list l = fuseDefects(Y, X, W);
matrix RD = l[1]; // Reduced inflation of Y x X
matrix ep = l[2]; // Idempotent endomorphism of RD (up to homotopy)
ep * ep == ep; // This endomorphism is actually a strict idempotent
matrix A = mfSplitIdempotent(RD, ep)[1]; // Differential on the MF A splitting ep
matrix final = mfSuspend( A, 1 ); // Differential on A[1]

print(final); // This is the differential on the fusion of Y with X

// The answer is a direct sum of two copies of the Koszul factorisation (y(1),y(1)^4)

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE A2
//
// We do the computation of Example A1, but using mfPushforward instead of fuseDefects.
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
ring rr=0,(x(1),y(1)),dp;
poly W = x(1)^3;
poly V = y(1)^5 - x(1)^3;

matrix X[2][2] = 0, x(1)^2, x(1), 0;

matrix Y0[2][2] = -x(1), y(1), -y(1)^4, x(1)^2;
matrix Y1[2][2] = x(1)^2, -y(1), y(1)^4, -x(1);
matrix z[2][2];
matrix Y = blockmat(z,Y1,Y0,z);

matrix D = MFtensor(Y,X);
matrix H = 1/3 * ZZtensor(unitmat(ncols(Y)),diff(X,x(1)));

// H is a homotopy between x(1)^2 and zero on D
H * D + D * H == x(1)^2 * unitmat(ncols(D));

// The tuple D, x(1), 2, H satisfies all the conditions for mfPushforward:
list l = mfPushforward(D, x(1), 2, H);
print(l[1]);

// Again, we get a direct sum of two copies of (y(1),y(1)^4)

/////////////////////////////////////////////////////////////////
// EXAMPLE A3
//
// We do the computation of Example A1, A2 using webCompilePair
/////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "linkhom.lib";
ring rr=0,(x(1),y(1)),dp;

// We consider a web with two vertices and two edges
//
//    X ---- x(1)^3 ----> Y ---- y(1)^5 ---->
//
// Here the second edge goes to the boundary.

// Format for an edge is source, target, variable, potential. Start indexing
// your vertices at 1, since 0 stands for the boundary.
list e1 = list(1,2,list(x(1)),x(1)^3);
list e2 = list(2,0,list(y(1)),y(1)^5);
list edgeList = list(e1,e2);

// Now define the mfs X,Y to be placed at each vertex 
matrix X[2][2] = 0, x(1)^2, x(1), 0;

matrix Y0[2][2] = -x(1), y(1), -y(1)^4, x(1)^2;
matrix Y1[2][2] = x(1)^2, -y(1), y(1)^4, -x(1);
matrix z[2][2];
matrix Y = blockmat(z,Y1,Y0,z);

list mfs = X, Y;

// Define the web
list web = list(2, edgeList, mfs); // 2 for the number of vertices
webVerify(web);

// The compilation of this web is the fusion of Y with X. 
list compStrat = defaultCompStratForWeb(web);
list L = webCompilePair(web, compStrat);
print(L[1]); // Answer is the same as before (up to isomorphism, there are some signs)


//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE H1 - Computing Homs using idempotents, for x^d
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
ring rr=0,(x(1),y(1)),dp;
int baa=10;
poly W = x(1)^baa;

// We give ourselves matrix factorisations X and Y of W
matrix X[2][2] = 0, x(1), x(1)^(baa-1), 0;
matrix Y[2][2] = 0, x(1)^4, x(1)^(baa-4), 0;

// For baa = 10 we calculate that Hom(Y,X) and Hom(Y,X[1]) are one dimensional using Exts,
// when X = (x^9, x) and Y = (x^6, x^4). This agrees with the idempotent calculation below.
list l = fuseDefects(MFdual(Y), X, W);
matrix RD = l[1]; // Reduced inflation of MFdual(Y) x X
matrix ep = l[2]; // Idempotent endomorphism of RD
ep * ep == ep; // ep happens to be an idempotent "on the nose"?
matrix final = mfSuspend( mfSplitIdempotent(RD, ep)[1], 1 );
print(final); 

// The output is a 2x2 zero matrix. This is the differential on the Z/2-graded vector space k + k[1].

// We know that Hom(Y,X) is homotopy equivalent to the splitting of ep. Hence on
// cohomology (which is automatically the case here, since RD has zero differential) the
// matrix ep^0 is actually an idempotent matrix whose image is precisely H^0 Hom(Y,X).
// Hence dim H^0 Hom(Y,X) = rank(ep^0) and dim H^1 Hom(Y,X) = rank(ep^1)

matrix ep0 = extractblockmat(ep)[1];
matrix ep1 = extractblockmat(ep)[4];

print(mat_rk(ep0)); // Output is dim H^0 Hom(Y,X)
print(mat_rk(ep1)); // Output is dim H^1 Hom(Y,X) 

//////////// Independent calculation of Homs using Ext ////////////

LIB "homolog.lib";
ring S = 0,(x(1)),ds;

int baa = 10;
poly W = x(1)^baa;

ideal I = W;
qring A = std(I);

matrix X[2][2] = 0, x(1), x(1)^(baa-1), 0;
matrix Y[2][2] = 0, x(1)^4, x(1)^(baa-4),0;

module M = [X[1,2]];
module N = [Y[1,2]];
module Nsusp = [Y[2,1]];

isCM(M); isCM(N);

// We have one dimensions worth of morphisms M -> N and M -> N[1] in the stable cat of CMs
Ext(2,N,M,1); Ext(2,Nsusp,M,1);

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE H2 - Computing the endomorphism space of a  MF over the E6 singularity
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
ring rr=0,(x(1),x(2),y(1)),dp;
poly W = x(1)^3 + x(2)^4;

// Define the matrix factorisation
matrix phi[3][3] = x(2)^3,x(1)^2,x(1) * x(2)^2,x(1) * x(2),-x(2)^2,x(1)^2,x(1)^2,-x(1) * x(2),-x(2)^3;
matrix psi[3][3] = x(2),0,x(1),x(1),-x(2)^2,0,0,x(1),-x(2);
matrix z[3][3];
matrix X = blockmat(z,phi,psi,z);
X*X == W * unitmat(6);

// The fusion of X with its dual is Hom(X,X)
list l = fuseDefects(MFdual(X), X, W);
matrix RD = l[1];
matrix ep = l[2];
ep * ep == ep; // ep happens to be idempotent on the nose
matrix final = mfSuspend( mfSplitIdempotent(RD, ep)[1], 1 );
print(final);

// The output is that Hom(X,X) is six dimensional, and Hom(X,X[1]) is six dimensional. We can
// check this using Exts as follows

LIB "homolog.lib";
ring S = 0,(x(1),x(2)),ds;
poly W = x(1)^3 + x(2)^4;

ideal I = W;
qring A = std(I);

matrix phi[3][3] = x(2)^3,x(1)^2,x(1) * x(2)^2,x(1) * x(2),-x(2)^2,x(1)^2,x(1)^2,-x(1) * x(2),-x(2)^3;
matrix psi[3][3] = x(2),0,x(1),x(1),-x(2)^2,0,0,x(1),-x(2);
matrix z[3][3];
matrix X = blockmat(z,phi,psi,z);

module M = phi;
module Msusp = psi;

isCM(M); isCM(Msusp);

// We have one dimensions worth of morphisms M -> N and M -> N[1] in the stable cat of CMs
Ext(2,M,M,1); Ext(2,M,Msusp,1);

// We find that both spaces have dimension six, which corroborates what we calculated above.

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE H3 - Computing the endomorphism space of a certain MF over the D5 singularity
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
ring rr=0,(x(1),x(2)),dp;
poly W = x(1)^2 * x(2) + x(2)^4;

// Define the matrix factorisation
matrix phi[2][2] = x(1) * x(2), x(2)^2, x(2)^3, -x(1) * x(2);
matrix psi[2][2] = x(1), x(2), x(2)^2, -x(1);
matrix z[2][2];
matrix X = blockmat(z,phi,psi,z);
X * X == W * unitmat(4);

// We know from previous calculations that End(X) is four dimensional.
list l = fuseDefects(MFdual(X), X, W);
matrix RD = l[1];
matrix ep = l[2];
ep * ep == ep; 

// We see that RD has zero differential (of course) and 
matrix ep0 = extractblockmat(ep)[1];
matrix ep1 = extractblockmat(ep)[4];

print(mat_rk(ep0)); // Output is dim H^0 Hom(X,X)
print(mat_rk(ep1)); // Output is dim H^1 Hom(X,X) 

// Which tells us that dim H^0Hom(X,X) = 4, as expected.
// We can find an actual basis for the cohomology by running

list H = MFcofull(X,X);
print(H[1][1]); print(H[1][2]); print(H[1][3]); print(H[1][4]);
print(H[2][1]); print(H[2][2]);








//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE R4 - Fusion of symmetry defects in A-type minimal models. 
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "matrix.lib";
int nx=1;
int ny=2;
ring rr=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(5);
poly minpolyblow = (x(1)^4+x(1)^3+x(1)^2+x(1)+1);

poly W = x(1)^5;

// Define Pi = P_{i}, Pj = P_{j} and Pij = P_{i+j}:

int i,j = 77,42;

matrix Pj[2][2] = 0, ( x(1) - r^j * y(2) ), ( x(1)^5 - y(2)^5 )/(( x(1) - r^j * y(2) )), 0;
matrix Pi[2][2] = 0, ( y(1) - r^i * x(1) ), ( y(1)^5 - x(1)^5 )/(( y(1) - r^i * x(1) )), 0;

matrix Pij[2][2] = 0, ( y(1) - r^(i+j) * y(2) ), ( y(1)^5 - y(2)^5 )/(( y(1) - r^(i+j) * y(2) )), 0;

list l = fuseDefects(Pi, Pj, W);
matrix RD = l[1];
matrix ep = l[2];
print(ep * ep - ep);

// The result is that is Pi x Pj is equal to -Pij and therefore isomorphic to Pij:

matrix final = mfSuspend( mfSplitIdempotent(RD, ep), nx );
print(final + Pij);

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE R2 - 2-variable example, defect is not the identity defect!
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "matrix.lib";
int nx=2;
int ny=2;
ring rr=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(5);
poly minpolyblow = x(1)^4+x(1)^3+x(1)^2+x(1)+1;

int baa=5;
poly W = x(1)^baa + x(2)^baa;

// Define X, Y and D = Y x X:

matrix X[2][2] = 0, x(1) + r^2 * x(2), (x(1)^baa + x(2)^baa)/(x(1) + r^2 * x(2)), 0;
matrix Y1[2][2] = 0, x(1) + r^3 * x(2), -(x(1)^baa + x(2)^baa)/(x(1) + r^3 * x(2)), 0;
matrix Y2[2][2] = 0, y(1) + r^4 * y(2), (y(1)^baa + y(2)^baa)/(y(1) + r^4 * y(2)), 0;
matrix Y = MFtensor(Y1, Y2);

list l = fuseDefects(Y, X, W);
matrix RD = l[1]; // Reduced inflation of Y x X
matrix ep = l[2]; // Idempotent endomorphism of RD
print(ep * ep - ep); // is ep is an idempotent "on the nose"?

matrix final = mfSuspend( mfSplitIdempotent(RD, ep), nx );
print(final);

print(final - Y2); // Answer is that Y x X is Y2, as expected

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE R1 - Identity defect acting on (x,x^4)
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "matrix.lib";
int nx=1;
int ny=1;
ring rr=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(5);
poly minpolyblow = x(1)^4+x(1)^3+x(1)^2+x(1)+1;

int baa=5;
poly W = x(1)^baa;

// Define X, Y and D = Y x X:
matrix fY[1][1] = y(1)-x(1); 
matrix gY[1][1] = (y(1)^5 - x(1)^5)/(y(1)-x(1));
matrix fX[1][1] = x(1); 
matrix gX[1][1] = x(1)^4;
matrix fD = MFtensorF(fY,gY,fX,gX);
matrix gD = MFtensorG(fY,gY,fX,gX);
matrix n1[1][1];
matrix n2[2][2];
matrix X = blockmat(n1,gX,fX,n1);
matrix Y = blockmat(n1,gY,fY,n1);
matrix D = blockmat(n2,gD,fD,n2);

list l = fuseDefects(Y, X, W);
matrix RD = l[1]; // Reduced inflation of Y x X
matrix ep = l[2]; // Idempotent endomorphism of RD
print(ep * ep - ep); // is ep is an idempotent "on the nose"?

matrix final = mfSuspend( mfSplitIdempotent(RD, ep), nx );
print(final); // Answer should be (y,y^4)

// Note this gives the suspension of X, but that's OK because Y is not the identity defect,
// it is the suspension of the identity defect.

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE DQ1 (defect action on fundamental branes in A-type minimal model)
//
//         We want to check against eq. (6.36) of [Brunner/Roggenkamp 0707.0922] which
//         says that P_{m,m+1} x T_a = T_{a-1} + T_{a+1}. (See their (6.2) and (6.29)
//         for the notation.)
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "matrix.lib";
int nx=1;
int ny=1;
ring rr=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(5);
poly minpolyblow = x(1)^4+x(1)^3+x(1)^2+x(1)+1;

int d = 5;
poly W = x(1)^d;

int m = 1;
int a = 1;

// Define T and P
matrix T[2][2] = 0, x(1)^a, x(1)^(d-a), 0;
matrix P[2][2] = 0, (y(1) - r^m * x(1)) * (y(1) - r^(m+1) * x(1)), (y(1)^d - x(1)^d)/((y(1) - r^m * x(1)) * (y(1) - r^(m+1) * x(1))), 0;

// Do the fusion
list l = fuseDefects(P, T, W);
matrix RD = l[1]; // Reduced inflation of Y x X
matrix ep = l[2]; // Idempotent endomorphism of RD
print(ep * ep - ep); // is ep is an idempotent "on the nose"?
matrix final = mfSuspend( mfSplitIdempotent(RD, ep), nx );
print(final);

// According to (6.36) of [Brunner/Roggenkamp 0707.0922], P x T should be isomorphic to
// T2 := (0, y(1)^2 // y(1)^3, 0). And indeed, if we define
number c = (-1/5*r^2-1/5*r-1/5); 
matrix f[4][2] = 1, 0, c*y(1), 0, 0, 1, 0, c * y(1)^2;  // morphism from T2[1] to RD
matrix g[2][4] = 1,0,0,0,0,0,1,0;                       // morphism from RD to T2[1]
// (f,g) is a splitting of ep: 
print( g*f - unitmat(2) );
print( f*g - ep );

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE DQ3 
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "matrix.lib";
int nx=1;
int ny=1;
ring rr=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(5);
poly minpolyblow = x(1)^4+x(1)^3+x(1)^2+x(1)+1;

int d = 5;
poly W = x(1)^d;

int m = 1;
int a = 2;

// Define T and P
matrix T[2][2] = 0, x(1)^a, x(1)^(d-a), 0;
matrix P[2][2] = 0, (y(1) - r^m * x(1)) * (y(1) - r^(m+1) * x(1)), (y(1)^d - x(1)^d)/((y(1) - r^m * x(1)) * (y(1) - r^(m+1) * x(1))), 0;

// Do the fusion
list l = fuseDefects(P, T, W);
matrix RD = l[1]; // Reduced inflation of Y x X
matrix ep = l[2]; // Idempotent endomorphism of RD
print(ep * ep - ep); // is ep is an idempotent "on the nose"?
matrix final = mfSuspend( mfSplitIdempotent(RD, ep)[1], nx );
print(final);

// According to (6.36) of [Brunner/Roggenkamp 0707.0922], P x T should be isomorphic to
// (0, y(1)^1 // y(1)^4, 0) + (0, y(1)^3 // y(1)^2, 0). 

// Compute the endomorphisms of the MFs final and 
// BR := (0, y(1)^1 // y(1)^4, 0) + (0, y(1)^3 // y(1)^2, 0): 

def RRR = basering;
def nR = ringWithoutXVars();
setring nR;

matrix final = imap(RRR, final);

matrix BR[4][4] = 0, 0, y(1), 0,
                  0, 0, 0, y(1)^3, 
                  y(1)^4, 0,0,0,
                  0, y(1)^2,0,0;

list Fco  = MFcofull(final,final);
list BRco = MFcofull(BR,BR);

// final and BR have the same numbers of endobosons and endofermions:

size(Fco[1]) - size(BRco[1]);
size(Fco[2]) - size(BRco[2]);

// Look at even morphisms between BR and final:

int i;
for(i=1; i<=5; i++)
{
    print(" ");
    print(MFcofull(BR,final)[1][i]);
}

// The morphism M: BR -> final is an isomorphism (since its determinant is a nonzero constant):

matrix M = MFcofull(BR,final)[1][1] + MFcofull(BR,final)[1][4];
det(M);