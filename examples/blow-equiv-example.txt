/////////////////////////////////////////////////////////////////////////////
// Examples of fusion of equivariant defects
//

// Checked 16-10-2020 with Singular 4.1.0

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE A1 - Tensoring (x,x2) with a factorisation of y^3 - x^3
//
// Here the group is G = Z/(3)
//
////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "blowequiv.lib";
ring rr=(0,r),(x(1),y(1)),dp; minpoly=rootofUnity(3);
poly minpolyblow = x(1)^3 + 1;
list varGrading;
varGrading[1] = intvec(1);
intvec G = (3);
printlevel = 1;

poly W = x(1)^3;

// X = Q(M,1) 
int M = 1;
matrix X[2][2] = 0, x(1), x(1)^2, 0; // X is a MF of W
list Xequiv;
Xequiv[1] = intvec(M); // G-grading of even generator
Xequiv[2] = intvec(M+1); // G-grading of odd generator
isEquivMFValid(X, Xequiv, G, varGrading);

// Y is a factorisation of V - W, which we consider as a functor between MF(W) and MF(y(1)^3).
// We want to compute the image of X under this functor, that is, the fusion of Y and X
// over the intermediate group G
int m = 0;
intvec n = (1,1,1);
int dprime = size(n);
int d = sum(n);
poly V = y(1)^dprime;
list roots_of_unity = list(r);
list l = defectBrunnerRoggenkamp(m, n, r);
matrix Y = l[1]; // Matrix

list Yequiv_extra = l[2]; // Z/d'Z grading
list Yequiv = l[3]; // Z/dZ grading
isEquivMFValid(Y, Yequiv, G, varGrading);

matrix A = fuseEquivDefects(Y, X, G, varGrading, roots_of_unity, W, Yequiv, Xequiv);

print(A); // This is the differential on the fusion of Y with X

// Should be 0, 3y(1), 1/3y(1)^2, 0

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE A2 - Tensoring P^{(m,n)} with Q^{(M,1)} 
//
// Here the group is G = Z/(d) and the fusion is (5.38) of Brunner-Roggenkamp
// which states that
//
//   P^{(m,n)} * Q^{(M,1)} = 0 if M is not in m + { 0, n_1, n_1 + n_2, ... }
//                         = Q^{(a,1)} if M = m + n_1 + ... + n_a
//
// here n = (n_0, n_1, ..., n_{d'-1})
////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "blowequiv.lib";

int d = 8;
int dprime = 5;

// Note that we need both primitive dth and d'th roots of unity
// which means we should add to our field a primitive qth root
// where q = lcm(d,d')

ring rr=(0,r),(x(1),y(1)),dp; minpoly=rootofUnity(lcm(d,dprime));
poly minpolyblow = x(1)^(lcm(d,dprime)) + 1;

intvec G = (d);
intvec F = (dprime);

list varGrading = intvec(1); // G-grading of x variables
list varGradingF = intvec(1); // F-grading of y variables

poly droot = r^(lcm(d,dprime) div d);
poly dprimeroot = r^(lcm(d,dprime) div dprime);

poly W = x(1)^d;

// defectBrunnerRoggenkamp(m, n) size(n) = dprime, sum(n) = d
int m = 0;
intvec n = intvec(2,1,2,1,2);
list l = defectBrunnerRoggenkamp(m, n, dprimeroot);
matrix Y = l[1]; // Matrix
list Yequiv_extra = l[2]; // Z/dprime Z grading
list Yequiv = l[3]; // Z/dZ grading
isEquivMFValid(Y, Yequiv, G, varGrading);

int i;
list ac;
int curr;
for(i=2;i<=size(n);i++)
{
	curr = curr + n[i];
    ac[i-1] = curr;
}

print(ac);

int M;
for(M=1; M < d; M++)
{
	print("");
	print("[ M = " + string(M) + " ]");
	// X = Q(M,1) = boundaryBrunnerRoggenkamp(M,1,d)
	list l = boundaryBrunnerRoggenkamp(M, 1, d);
	matrix X = l[1];
	list Xequiv = l[2];
	//isEquivMFValid(X, Xequiv, G, varGrading);
	
	list l = fuseEquivDefects(Y, X, G, varGrading, list(droot), W, Yequiv, Xequiv, F, varGradingF, Yequiv_extra);
	
	print(l[1]);
	if( size(l) > 1 )
	{
	    print("Grading = " + string(l[2][1]) + ", " + string(l[2][2]));
	}
}

//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE A3 - Tensoring P^{(mtilde,ntilde)} with P^{(m,n)}
//
// Here the group is G = Z/(dprime) and the fusion is (5.19) of Brunner-Roggenkamp.
// The defects are organised as follows:
//
//   (y(1)^dprimeprime, Z/(dprimeprime)) <-- (mtilde, ntilde) -- (x(1)^dprime, Z/(dprime))
//
//   (x(1)^dprime, Z/(dprime)) <-- (m, n) -- (y(2)^d, Z/(d))
//
//   F = (dprimeprime)
//   G = (dprime)
//   H = (d)
//
// The fusion rules are that the result of the above fusion is P^{(mhat, nhat)}
//
//   mhat = m + \sum_{i=1}^{mtilde} n_i
//   nhat_{b+1} = \sum_{i=1}^{ntilde_{b+1}} n_{mtilde + \sum_{j=1}^b ntilde_j + i}
//
////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "blowequiv.lib";

int d = 8;
int dprime = 5;
int dprimeprime = 3;

printlevel = 1;

// Note that we need primitive dth, dprimeth and dprimeprime roots of unity
// which means we should add to our field a primitive qth root
// where q = lcm(lcm(d,dprime),dprimeprime)

int lcmult = lcm(lcm(d,dprime),dprimeprime);

ring rr=(0,r),(x(1),y(1),y(2)),dp; minpoly=rootofUnity(lcmult);
poly minpolyblow = x(1)^(lcmult) + 1;

intvec F = (dprimeprime);
intvec G = (dprime);
intvec H = (d);

// Note that the "outside" gradings need to assign a grade
// to every y-variable, in order
list varGradingF = intvec(1), intvec(0); // F-grading of y(1)
list varGradingG = intvec(1); // G-grading of x(1)
list varGradingH = intvec(0), intvec(1); // H-grading of y(2)

poly droot = r^(lcmult div d);
poly dprimeroot = r^(lcmult div dprime);
poly dprimeprimeroot = r^(lcmult div dprimeprime);

// defectBrunnerRoggenkamp(m, n) size(n) = dprime, sum(n) = d
int m = 0;
intvec n = intvec(2,1,2,1,2);
list l = defectBrunnerRoggenkamp(m, n, dprimeroot);
matrix Y = l[1]; // Matrix in y(1)^{dprime} <-- x(1)^{d} form
Y = subst(Y, x(1), y(2));
Y = subst(Y, y(1), x(1));
list Yequiv_extra = l[2]; // Z/dprime Z grading
list Yequiv = l[3]; // Z/dZ grading
isEquivMFValid(Y, Yequiv_extra, G, varGradingG);

// defectBrunnerRoggenkamp(mtilde, ntilde) size(ntilde) = dprimeprime, sum(ntilde) = dprime
int mtilde = 0;
intvec ntilde = intvec(2,1,2);
list l = defectBrunnerRoggenkamp(mtilde, ntilde, dprimeprimeroot);
matrix Z = l[1]; // Matrix in y(1)^{dprimeprime} <-- x(1)^{dprime} form
list Zequiv_extra = l[2]; // Z/dprimeprime Z grading
list Zequiv = l[3]; // Z/dpime Z grading
isEquivMFValid(Z, Zequiv, G, varGradingG);

list l = fuseEquivDefects(Z, Y, G, varGradingG, list(dprimeroot), x(1)^(dprime), Zequiv, Yequiv_extra, F, varGradingF, Zequiv_extra, H, varGradingH, Yequiv);

print(l[1]);
print("Left grading (Z/dprimeprimeZ)");
print(l[2]);
print("Right grading (Z/dZ)");
print(l[3]);

//   mhat = m + \sum_{i=1}^{mtilde} n_i
//   nhat_{b+1} = \sum_{i=1}^{ntilde_{b+1}} n_{mtilde + \sum_{j=1}^b ntilde_j + i}

int mhat = m;
int i;
for(i=1; i<=mtilde; i++)
{
    mhat = mhat + n[i];
}
mhat = mhat mod d;

intvec nhat = 0 * intvec(1..dprimeprime); // size(nhat) = dprimeprime, sum(nhat) = d
int b,j,idx;
for(b=0; b<=dprimeprime-2; b++)
{
    // nhat[b+2] is nhat_{b+1}
    for(i=1;i<=ntilde[b+2];i++)
    {
        idx = mtilde;
        for(j=1;j<=b;j++)
        {
            idx = idx + ntilde[j+1];
        }
        idx = idx + i;
        idx = idx mod dprime;
        nhat[b+2] = nhat[b+2] + n[idx+1];
    }
}

// Note that cyclic shifts of n are isomorphic matrix factorisations (up to 
// appropriate grading shifts)

nhat[1] = d - sum(nhat);
print("Correct answer is (mhat, nhat) = (" + string(mhat) + ", (" + string(nhat) + "))");
