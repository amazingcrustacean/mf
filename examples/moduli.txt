/////////////////////////////////////////////////////////////////////////////
// Examples of moduli spaces of MFs
//
//  A - self defects of x^2 rank 1, degree <= 1
//  B - universal MF of part A
//  C - universal MF of y^3 - x^3 rank 1, degree <= 2
//  D - universal MF of y^4 - x^4 rank 1, degree <= 3
//  E - determinant MF self-defects of x^3 - rank 2, degree <= 2
//  F - self-defects of x^2 with homotopies - rank 1, degree <= 1
//  G - self-defects of x^3 with homotopies - rank 1, degree <= 2

/////////////////////////////////////////////////////////////////////////////
// Examples of graded moduli spaces of MFs
// 
//  GA - graded self-defects of x^3 - case of rank 1
//  GB - graded self-defects of x^3 - case of rank 2

// NOTE: See blow.lib for our grading conventions

//////////////////////////////////////////////////////////////////////////////////////
// (A) Moduli of self-defects of x^2 - case of rank 1, total degree <= 1
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib); //option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y^2 - x^2;

int r = 1;
int k = 1;

// Find the moduli space of factorisations of W which are
// rank 1 (i.e. 2x2 supermatrices) and have entries which
// are polynomials in x,y of total degree <= 1, that is,
// a + bx + cy for some a,b,c.

def nR = moduliOfPotential(W,r,k);
setring(nR);
ideal I = groebner(moduli_eqns);

// Note here that the middle indices are always (1)(1) because our
// matrices are rank 1. Let us write f(a)(b) for f(a)(1)(1)(b).
// The b's are indices into the following set of monomials

displayIndices(1);
// 1,y,x = [0,0],[0,1],[1,0]

// If we write the upper right block as a + by + cx and
// the lower left block as a' + b'y + c'x then

//I[1]=f(2)(1)(1)(1) = a'
//I[2]=f(1)(1)(1)(1) = a
//I[3]=f(1)(1)(1)(3)*f(2)(1)(1)(3)+1 = cc'+1
//I[4]=f(2)(1)(1)(2)^2-f(2)(1)(1)(3)^2 = (b')^2-(c')^2
//I[5]=f(1)(1)(1)(3)*f(2)(1)(1)(2)+f(1)(1)(1)(2)*f(2)(1)(1)(3) = cb'+bc'
//I[6]=f(1)(1)(1)(2)*f(2)(1)(1)(2)-1 = bb'-1
//I[7]=f(1)(1)(1)(2)^2-f(1)(1)(1)(3)^2 = b^2-c^2
//I[8]=f(1)(1)(1)(2)*f(2)(1)(1)(3)^2-f(2)(1)(1)(2) = b(c')^2-b'

list P = primdecSY(I);

// P is a list containing the primary decomposition of I,
// where P[i][1] is the primary component and P[i][2] the associated
// prime. In our case we see that P[i][1] == P[i][2] for every i,
// that is, I is an intersection of prime ideals. Or what is the same,
// the locus cut out by I is a union of two irreducible components. They
// are given by the prime ideals:

P[1][1];

//_[1]=f(2)(1)(1)(2)+f(2)(1)(1)(3) = b' + c'
//_[2]=f(2)(1)(1)(1) = a'
//_[3]=f(1)(1)(1)(2)-f(1)(1)(1)(3) = b - c
//_[4]=f(1)(1)(1)(1) = a
//_[5]=f(1)(1)(1)(3)*f(2)(1)(1)(3)+1 = cc' + 1

// That is, this component is the space of all MFs where a = a' = 0
// and b = c, b' = -c' and cc' = -1. This is one-dimensional: it is a hyperbola.
// Note that each point [X] determines the same MF X up to isomorphism, they
// are all isomorphic to the MF (y+x, y-x) which is c = 1, c' = -1. So the
// Chern character is constant with value 2 on this component

P[2][1];

//_[1]=f(2)(1)(1)(2)-f(2)(1)(1)(3) = b' - c'
//_[2]=f(2)(1)(1)(1) = a'
//_[3]=f(1)(1)(1)(2)+f(1)(1)(1)(3) = b + c
//_[4]=f(1)(1)(1)(1) = a
//_[5]=f(1)(1)(1)(3)*f(2)(1)(1)(3)+1 = cc' + 1

// The same but with b' = c' and b = -c, again one-dimensional.
// These MFs are all isomorphic to (y-x,y+x), so the Chern character is constant
// with value -2 on this component

// We see from these calculations that the irreducible subschemes P[1][1] and P[2][1]
// are disjoint, and collapse to {(y+x,y-x)} and {(y-x,y+x)} up to isomorphism resp.

//////////////////////////////////////////////////////////////////////////////////////
// (B) Universal MF of y^2 - x^2 case of rank 1, total degree <= 1
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib); //option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y2 - x2;

def uR = universalMF(W,1,1);
setring(uR);

U; // The universal MF of W of rank 1 and total degree <= 1

// U[1,1]=0
// U[1,2]=x*f(1)(1)(1)(3)+y*f(1)(1)(1)(2)+f(1)(1)(1)(1)
// U[2,1]=x*f(2)(1)(1)(3)+y*f(2)(1)(1)(2)+f(2)(1)(1)(1)
// U[2,2]=0

// U is not a MF of W on the nose, but only up to moduli_eqns

ideal I = groebner(moduli_eqns);
reduce((U*U)[1,1],I) == y2 - x2;
reduce((U*U)[2,2],I) == y2 - x2;

// We can compute e.g. the chern Char of U
poly ch = supertrace(diff(U,x) * diff(U,y));
reduce(ch,I);

// -2*f(1)(1)(1)(2)*f(2)(1)(1)(3) = -2bc' in the notation used earlier
// We know that Spec(nR/I) is a disjoint union of two components: on one
// bc' = 1 and on the other bc' = -1.

//////////////////////////////////////////////////////////////////////////////////////
// (C) Universal MF of y^3 - x^3 case of rank 1, total degree <= 2
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib); //option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y^3 - x^3;

def uR = universalMF(W,1,2);
setring(uR);
ideal I = groebner(moduli_eqns);
poly ch = supertrace(diff(U,x) * diff(U,y));
poly rch = reduce(ch,I);

// Now see the values this rch takes on the four components identified earlier
list P = primdecSY(I);

int i;
for(i=1;i<=4;i++){ ideal p(i) = groebner(P[i][2]); }

for(i=1;i<=4;i++){ dim(p(i)); }

// 3
// 3
// 3
// 3

for(i=1;i<=4;i++){ reduce(ch,p(i)); }

//-3*x-3*y
//-3*x*f(1)(1)(1)(2)*f(2)(1)(1)(6)+3*y*f(1)(1)(1)(2)*f(2)(1)(1)(6)+3*y
//3*x+3*y
//-3*x*f(1)(1)(1)(5)*f(2)(1)(1)(3)+3*y*f(1)(1)(1)(5)*f(2)(1)(1)(3)-3*y


// So on the irreducible subcomponent of the moduli space cut out by p(2), p(4)
// the Chern character does vary. Thus the points do not all represent isomorphic
// matrix factorisations (although that does not mean we have 1-parameter families of
// non-isomorphic MFs, see below).
//
// By inspection we can see that p(1), p(3) parametrise the suspension of one
// another (see how switching f(1) to f(2) relates them). Writing 
// a = f(1)(1)(1)(2) and b = f(2)(1)(1)(6) the MF parametrised by p(1) is
// the pair ( a( y - x ), b( y2 + xy + x2 ) ) with ab = 1. Thus all points are
// isomorphic to (y-x, y2+xy+x2) and p(3) is the shift.
//
// Before discussing the meaning of p(2), p(4) note that over C we know all the
// MFs of W, because C[x,y] is a UFD and y^3-x^3 = (y-x)(y-rx)(y-r^2x) where r is
// a primitive third root of unity, so 1 + r + r^2 = 0. Then a MF of W must just
// choose a subset of these factors (up to isomorphism). These are the P_S defects.
//
// Over Q the root r does not exist, but still the components p(2), p(4) are "about" 
// the P_S's, in the sense that the C-points of these components are these MFs.
//
// For example consider the component p(2). Let [X] denote a C-point of this scheme,
// where X is the corresponding MF. Up to isomorphism we may fix f(2)(1)(1)(6) = 1.
// Set a = f(1)(1)(1)(2). It is easy to check that the condition for [X] to be on p(2)
// is exactly that 1 + a + a^2 = 0, so either a = r or a = r^2. Since the upper right
// block in X is x - ay = a( y - a^2x ) we have
//
// If a = r then X \cong P_{2}
// If a = r^2 then X \cong P_{1}
//
// Letting f(2)(1)(1)(6) vary again these two points generate lines of isomorphic MFs.
// So the upshot is: p(2) describes P_{1} and P_{2}. Similarly p(4) must describe
// P_{1}[1] = P_{0,2} and P_{2}[1] = P_{0,1}, just as p(3) describes P_{0}[1] = P_{1,2}.

//////////////////////////////////////////////////////////////////////////////////////
// (D) Universal MF of y^4 - x^4 case of rank 1, total degree <= 3
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib); option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y^4 - x^4;

int r = 1;
int k = 3;

def uR = universalMF(W,r,k);
setring(uR);
ideal I = groebner(moduli_eqns); // takes a few minutes

// I has 230 equations in it
// Not-quite-Random examples:
// I[189] = f(1)(1)(1)(4)*f(1)(1)(1)(6)*f(1)(1)(1)(7)-f(1)(1)(1)(4)^2*f(1)(1)(1)(9)-f(1)(1)(1)(5)*f(1)(1)(1)(6)*f(1)(1)(1)(10)-f(1)(1)(1)(3)*f(1)(1)(1)(9)*f(1)(1)(1)(10)+f(1)(1)(1)(2)*f(1)(1)(1)(10)^2
// I[199] = 3*f(1)(1)(1)(2)*f(2)(1)(1)(9)*f(2)(1)(1)(10)^2-f(2)(1)(1)(9)^2-2*f(2)(1)(1)(8)*f(2)(1)(1)(10)

list P = primdecSY(I);

// This has 10 components, not all prime

int i;
ideal p(1..10);

for(i=1;i<=10;i++)
{
p(i) = groebner(P[i][2]); // take the prime radicals
}

for(i=1;i<=10;i++)
{
dim(p(i));
}

// The dimensions are all 3

poly ch = supertrace(diff(U,x) * diff(U,y));
poly rch = reduce(ch,I);

// Now see the values this rch takes on the 10 components identified earlier
for(i=1;i<=10;i++)
{
reduce(rch,p(i));
}

// -4*x^2*f(1)(1)(1)(2)*f(2)(1)(1)(10)+4*x*y+4*y^2*f(1)(1)(1)(2)*f(2)(1)(1)(10)
// -4*x^2-4*x*y-4*y^2
// 4*x^2-4*x*y+4*y^2
// -4*x^2*f(1)(1)(1)(9)*f(2)(1)(1)(3)-4*x*y+4*y^2*f(1)(1)(1)(9)*f(2)(1)(1)(3)
// 4*x^2+4*x*y+4*y^2
// -8*x*y
// 8*x*y
// -4*x^2*f(1)(1)(1)(5)*f(2)(1)(1)(6)+4*y^2*f(1)(1)(1)(5)*f(2)(1)(1)(6)+8*y^2
// -4*x^2*f(1)(1)(1)(5)*f(2)(1)(1)(6)+4*y^2*f(1)(1)(1)(5)*f(2)(1)(1)(6)-8*y^2
// -4*x^2+4*x*y-4*y^2

//////////////////////////////////////////////////////////////////////////////////////
// (E) Moduli of self-defects of x^3 - case of rank 2, total degree <= 2
// This time only parametrising determinant MFs
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib); option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y^3 - x^3;

int r = 2;
int k = 2;

def uR = universalMFDet(W,r,k);
setring(uR);

poly ch = supertrace(diff(U,x) * diff(U,y));
ch;
// 0 - well duh

// The full moduli space takes forever to compute so let us
// stick to the subscheme of MFs where all constant terms
// and all xy terms are zero
int i,j;
for(i=1;i<=r;i++)
{
for(j=1;j<=r;j++)
{
moduli_eqns = moduli_eqns + f(i)(j)(1);
moduli_eqns = moduli_eqns + f(i)(j)(5);
}
}

ideal I = groebner(moduli_eqns);

poly ch = supertrace(diff(U,x) * diff(U,y));
poly rch = reduce(ch,I);

list P = primdecSY(I); // takes about a minute

// There are two components
ideal p(1) = groebner(P[1][2]);
ideal p(2) = groebner(P[2][2]);

//////////////////////////////////////////////////////////////////////////////////////
// (F) Moduli of self-defects of x^2 with homotopies - case of rank 1, total degree <= 1
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib); //option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y^2 - x^2;

def hR = moduliOfPotential_H(W,1,1,intvec(1,1)); // homotopies h(1), h(2) for x,y
setring(hR);
ideal I = groebner(moduli_eqns + homotopy_eqns);

ideal p(1) = groebner(P[1][2]);
ideal p(2) = groebner(P[2][2]);

// If we write the upper right block as a + by + cx and
// the lower left block as a' + b'y + c'x then recall
// from earlier that the first component of moduli_eqns is
//_[1]=f(2)(1)(1)(2)+f(2)(1)(1)(3) = b' + c'
//_[2]=f(2)(1)(1)(1) = a'
//_[3]=f(1)(1)(1)(2)-f(1)(1)(1)(3) = b - c
//_[4]=f(1)(1)(1)(1) = a
//_[5]=f(1)(1)(1)(3)*f(2)(1)(1)(3)+1 = cc' + 1

// That is, this component is the space of all MFs where a = a' = 0
// and b = c, b' = -c' and cc' = -1 all iso to (y+x, y-x).

// By inspection we see that p(2) encodes these equations plus
// the equations putting something like h(2) = \partial_y D

// p(2)[1]=h(2)(2)(1)(1)(2)+h(2)(2)(1)(1)(3)
// p(2)[2]=h(2)(1)(1)(1)(2)-h(2)(1)(1)(1)(3)
// p(2)[3]=h(1)(2)(1)(1)(2)+h(1)(2)(1)(1)(3)
// p(2)[4]=h(1)(2)(1)(1)(1)-h(2)(2)(1)(1)(1)
// p(2)[5]=h(1)(1)(1)(1)(2)-h(1)(1)(1)(1)(3)
// p(2)[6]=h(1)(1)(1)(1)(1)+h(2)(1)(1)(1)(1)
// p(2)[7]=h(2)(1)(1)(1)(3)*h(2)(2)(1)(1)(1)-h(2)(1)(1)(1)(1)*h(2)(2)(1)(1)(3)
// p(2)[8]=4*h(2)(1)(1)(1)(1)*h(2)(2)(1)(1)(1)-1
// p(2)[9]=h(1)(2)(1)(1)(3)*h(2)(1)(1)(1)(3)-h(1)(1)(1)(1)(3)*h(2)(2)(1)(1)(3)
// p(2)[10]=h(1)(2)(1)(1)(3)*h(2)(1)(1)(1)(1)-h(1)(1)(1)(1)(3)*h(2)(2)(1)(1)(1)
// p(2)[11]=4*h(2)(1)(1)(1)(1)^2*h(2)(2)(1)(1)(3)-h(2)(1)(1)(1)(3)
// p(2)[12]=4*h(1)(1)(1)(1)(3)*h(2)(2)(1)(1)(1)^2-h(1)(2)(1)(1)(3)
// p(2)[13]=f(2)(1)(1)(3)+2*h(2)(2)(1)(1)(1)
// p(2)[14]=f(2)(1)(1)(2)-2*h(2)(2)(1)(1)(1)
// p(2)[15]=f(2)(1)(1)(1)
// p(2)[16]=f(1)(1)(1)(3)-2*h(2)(1)(1)(1)(1)
// p(2)[17]=f(1)(1)(1)(2)-2*h(2)(1)(1)(1)(1)
// p(2)[18]=f(1)(1)(1)(1)

// And test the universal MF on the same example

option(noredefine);option(noloadLib); //option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y^2 - x^2;

def uR = universalMF_H(W,1,1,intvec(1,1));
setring(uR);
ideal I = groebner(moduli_eqns + homotopy_eqns);

reduce(H(1)*U+U*H(1),I);
// _[1]=x*gen(1)
// _[2]=x*gen(2)

//////////////////////////////////////////////////////////////////////////////////////
// (G) Moduli of self-defects of x^3 with homotopies - case of rank 1, degree <= 2
//////////////////////////////////////////////////////////////////////////////////////

// We revisit the example and parameters of (C) but now with homotopies

option(noredefine);option(noloadLib); option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y^3 - x^3;

int r = 1;
int k = 2;

def uR = universalMF_H(W,r,k,intvec(2,2));
setring(uR);

ideal I = groebner(moduli_eqns);

// To make the Grobner basis tractable, we restrict to the irreducible
// component p(2) of the moduli space identified in Example C, which describes
// the permutation-type defects P_{1} and P_{2}
list P = primdecSY(I); 
ideal p(2) = groebner(P[2][2]);

// Points of V(J) are MFs in the component p(2) together with homotopies
// H(1) for the action of x^2 and H(2) for the action of y^2
ideal J = groebner(p(2) + homotopy_eqns);

// Again one checks that e.g. [H(1),U] = x^2 modulo J

//////////////////////////////////////////////////////////////////////////////////////
// (GA) Moduli of graded self-defects of x^3 - case of rank 1, degree <= 2
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib); //option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y^3 - x^3; // deg(W) = 3 = n + 1 so n = 2.
int r = 1;
int k = 2;

def uR = universalMF(W,r,k);
setring(uR);

// A MF of W is a pair f,g with fg = W and if we put f in the upper right (i.e. A)
// and g in the lower left (i.e. B) then for a grading vector g = (g1,g2) we are
// asking that multiplication by f is a map of degree 3 R{g2} -> R{g1} and that
// g is a map of degree 3 R{g1} -> R{g2}, using the doubled grading on the ring R
// This means f is homogeneous with 2*deg(f) = 3 - g1 + g2
// and g is homogeneous with 2*deg(g) = 3 - g2 + g1
// To capture P_{1} where deg(f) = 1 and deg(g) = 2 we need
// 2 = 3 - g1 + g2 and 4 = 3 - g2 + g1, so 
// g1 = g2 + 1 
// Let's choose say g1 = 2, g2 = 1

ideal G = locusGradedMF(2, 3, r, k, intvec(2,1));

//G[1]=f(2)(1)(1)(1) coeff of 1 in A
//G[2]=f(1)(1)(1)(1) coeff of 1 in B
//G[3]=f(2)(1)(1)(2) coeff of y in B
//G[4]=f(2)(1)(1)(3) coeff of x in B
//G[5]=f(1)(1)(1)(4) coeff of y2 in A
//G[6]=f(1)(1)(1)(5) coeff of xy in A
//G[7]=f(1)(1)(1)(6) coeff of x2 in A

// This zeros out all monomials not of degree 1 in A
// and all monomials not of degree 2 in B, which is correct

// Note the monomial indices are
// 1    1    [0,0]
// 2    y    [0,1]
// 3    x    [1,0]
// 4    y2    [0,2]
// 5    xy    [1,1]
// 6    x2    [2,0]

ideal I = groebner(G + moduli_eqns);

///////////////////////////////////////////////////////////////////////
// (GB) Moduli of graded self-defects of x^3 - case of rank 2
///////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib); //option(prot);
LIB "blow.lib";
LIB "moduli.lib";
ring rr=0,(x,y),dp;
printlevel=1;
poly W = y^3 - x^3; // deg(W) = 3 = n + 1 so n = 2.
int r = 2;
int k = 2;

def uR = universalMF(W,r,k);
setring(uR);

ideal G = locusGradedMF(2, 3, r, k, intvec(2,1,0,1));
ideal I = groebner(G + moduli_eqns);
list P = primdecSY(I); 

ideal p(1..5);
int i;
for(i=1;i<=size(P);i++)
{
p(i)=groebner(P[i][2]);
}

poly ch = supertrace(diff(U,x) * diff(U,y));
poly rch = reduce(ch,I);

for(i=1;i<=5;i++)
{
reduce(rch,p(i));
}

//-3*x*f(1)(1)(2)(2)*f(2)(2)(1)(6)-3*x+3*y*f(1)(1)(2)(2)*f(2)(2)(1)(6)
//-6*x*f(1)(1)(2)(2)*f(2)(2)(1)(6)+6*y*f(1)(1)(2)(2)*f(2)(2)(1)(6)+6*y
//3*x+3*y
//-6*x-6*y
//-3*x*f(1)(2)(1)(2)*f(2)(1)(2)(6)-3*x+3*y*f(1)(2)(1)(2)*f(2)(1)(2)(6)

// Recall the answers from part C, the moduli of rank 1 MFs of the same potential 
// and on those components we had chern chars

//-3*x-3*y
//-3*x*f(1)(1)(1)(2)*f(2)(1)(1)(6)+3*y*f(1)(1)(1)(2)*f(2)(1)(1)(6)+3*y
//3*x+3*y
//-3*x*f(1)(1)(1)(5)*f(2)(1)(1)(3)+3*y*f(1)(1)(1)(5)*f(2)(1)(1)(3)-3*y

// Note that the -6*x-6*y is obviously a direct sum of two copies of the shifted
// identity defect, 3*x + 3*y is the identity defect plus something contractible
// The others I'm not sure about