////////////////////////////////////////////////////////////////////

version="0.1";
category="Miscellaneous";
// summary description of the library
info="
LIBRARY:   dualitytrace.lib  Explicit traces for Serre duality
AUTHOR:    Daniel Murfet, email: daniel.murfet@gmail.com
KEYWORDS:  trace, duality

PROCEDURES:
";

////////////////////////////////////////////////////////////////////
// ACKNOWLEDGEMENTS
//
// Included are some clever routines of Nils Carqueville for calculating morphism spaces,
// from a paper on his homepage titled "Computing BRST-cohomology algorithmically". 

////////////////////////////////////////////////////////////////////
// NOTES
//
// Let W be a polynomial and (p,q) a matrix factorisation of W, of size r. If
// (p',q') is another matrix factorisation of size r', then a morphism from
// (p,q) to (p',q') is represented in one of three ways in code:
//
// FORMATS OF MATRICES
//
// We recognise three different presentions of morphisms between matrix factorisations. 
// 
// 1. (Vector) Following Nils' convention, as a vector of polynomials
// 2. (Block) As a large block matrix (a & 0 \\ 0 & d) where (a,d) is a morphism
// 3. (Small) As a list consisting of two matrices (a,d) representing the morphism
//
// Methods will indicate which type of morphism they accept, and return
//
// Fix a matrix factorisation (p,q) and suppose that k[[x]] is a power series ring
// containing W, and that we are interested in the singularity R = k[[x]]/W. Suppose
// that R has Krull dimension d. Then the singular trace assigns to any morphism
// of matrix factorisations
//
// 		(a,d): (p,q) \lto \Sigma^{d-1} (p,q)
//
// a scalar value. We represent this trace function as a block matrix F = (s & 0 \\ 0 & t)
// of polynomials called the FORM MATRIX. The blocks are such that the form matrix
// has the same dimensions as the block matrix A = (a & 0 \\ 0 & d). To calculate the
// trace of a morphism (a,d) as above, we take the sum over all i,j over F_{ij}( A_{ij} )
// where we consider F_{ij} as a linear functional on k[x]. To explain this, it suffices
// to explain how a monomial m in the variables of x becomes a functional: the monomial m
// is defined on the k-basis of k[x] consisting of monomials by sending itself to 1, and
// every other monomial to zero.
//
// With this notation, Tr^sg(A) = \sum_{i,j} F_{i,j}( A_{i,j} ) is the singular trace function.
//
// For example, if the i,j entry of F is x2 + 3zy and the i,j entry of A_{ij} is x + x2 - zy
// then F_{ij}( A_{ij} ) = 1 - 3 = -2.
//
// One must calculate F separately and provide it as an input (usually called "sg") to many
// of the methods in this library. Note that typically, just because of the way one computes
// the trace, either the block s or the block t are nonzero, and not both. So in fact we only
// use one of the blocks defining A.
//
// For some remarks on bilinear forms, and associated matrics, and nondegeneracy, see
// p.17 of E6tot


///// UTILITY METHODS ////////////////////////////

proc sing_eval_poly_on_poly(poly f, poly g)
{
	// Interpreting f as a functional on polynomials (as explained in the introduction)
	// we evaluate it on g and return the result
	
	if( f == 0 || g == 0 ){ return(0); }
	
	// First obtain a product of all ring variables
	int i,j;
	
	//print("Polynomials f = " + string(f) + " and g = " + string(g));
	
	poly vars = 1;
	for(i=1;i<= nvars(basering);i++)
	{
		vars = vars * var(i);
	}
	
	// coef(f, vars) returns a matrix whose first row is a list of all monomials
	// occurring in f with nonzero coefficients, and who second row contains the
	// corresponding (scalar) coefficients of these monomials
	matrix f_monomials = coef(f, vars); 
	matrix g_monomials = coef(g, vars);
	
	int no_f_monoms = ncols(f_monomials);
	int no_g_monoms = ncols(g_monomials);

	poly f_monom, g_monom;
	poly result = 0;
	
	for(i=1; i <= no_f_monoms; i++)
	{
		f_monom = f_monomials[1,i];
		
		// Now look for this monomial occurring in g
		for(j=1; j <= no_g_monoms; j++)
		{
			if( g_monomials[1,j] == f_monom )
			{
				// We add to the result the coefficient of f_monom in f multiplied with
				// the coefficient of f_monom in g
				//print("Found monomial " + string(f_monom) + " in f and g, adding to result");
				result = result + f_monomials[2,i] * g_monomials[2,j];
			}
		}
	}
	
	return(result);
}

////////////////////////////////////////////////////////////////////
// Given a block matrix returns the supertrace
//
// INPUT: Block matrix (A & B \\ C & D) where A,B,C,D are square matrices of size r
//
// OUTPUT: Tr(A) - Tr(D)

proc supertrace(matrix m, int r)
{		
	matrix zero[r][r];
	matrix E[r][r]; E = E + 1; // The unit matrix
	
	matrix B = blockmat(E,zero,zero,-1 * E);
	
	return( trace( B * m ) );
}

////////////////////////////////////////////////////////////////////
// Given a morphisms in format (Vector), returns a morphism in format (Block)
//
// The second method does this for a list of morphisms.
//
// INPUT: Matrix in format (Vector), and the size r of the blocks
//
// Note on the vector format. Given a block matrix (A & 0\\ 0 & B) the corresponding
// vector V reads out of the rows of A, and then the rows of B, so that V begins
//
// V = [a_11, a_12, ..., a_1r, a_21, ...., a_2r, ...., a_r1,...,a_rr,b_11,...,b_1r,....,b_r1,...b_rr]
//
// That is, if we apply vectortoblock(V) then we recover the block matrix (A & 0\\ 0 & B)

proc vectortoblock(vector v, int r)
{
	int j,k; 
	matrix ma[2*r][2*r]; 
	
	for(j=1; j<=r; j++) 
	{
		for(k=1; k<=r; k++) 
		{
			ma[k,j] = v[(k-1)*r + j]; 
			ma[k+r,j+r] = v[(r-1+k)*r + j]; 
		} 
	}  
	
	return(ma);	
}

proc list_vectortoblock(list V, int r) 
{ 
	int i,j,k; 
	list M; 
	matrix ma[2*r][2*r]; 
	for(i=1; i<=size(V); i++){M = M + list(ma);} 
	
	for(i=1; i<=size(V); i++) 
	{
		M[i] = vectortoblock(V[i], r);
	} 
	
	return(M); 
}


////// TRACE METHODS //////////////////////////////



////////////////////////////////////////////////////////////////////
// singtrace
//
// Computes the singular trace Tr^sg of a morphism of matrix factorisations
// (a,d): (p,q) \lto \Sigma^{d-1} (p,q) as explained in the introduction. 
//
// INPUTS: A morphism of MFs in block format (a & 0 \\ 0 & d), and the form matrix also in block format

proc singtrace(matrix m, matrix sgform)
{
	// We follow the method of calculation described in the introduction.
	// TODO: Possible slight speedups possible
	// NOTE: The given block matrices must be square

	// To circumvent our own boundless stupidity, check that the input is
	// really a block matrix and not a small matrix
	if( ncols(m) != ncols(sgform) || nrows(m) != nrows(sgform) )
	{
		print("Error: morphism and form matrix are not of compatible dimension.");
		return();
	}
	
	poly ret_trace = 0;
	int s = ncols(m);
	int row, col;

	for( row = 1; row <= s; row++ )
	{
		for( col = 1; col <= s; col++ )
		{	
			ret_trace = ret_trace + sing_eval_poly_on_poly(sgform[row,col], m[row,col]);
		}
	}

	return(ret_trace);
}

////////////////////////////////////////
// sing_trace
//
// Deprecated old version of the method. Here we take a matrix a, which is meant to the first
// entry in a pair (a,d) defining matrix factorisation, and we take a form matrix sg which
// is just meant to be applied to this element of the pair (or, one could pass d instead of a,
// if the form matrix is designed with this in mind). For example the form matrices in our notes
// calculated for all ADE singularities are presented in this form, and are meant to be evaluated
// on the first matrix a in a pair (this is for curve singularities, and two variables)
//
// NOTE: Works now in any number of variables
// DEPRECATED!

proc sing_trace(matrix a, matrix sg)
{
	poly ret_trace;
	int s = ncols(a);
	int row, col;

	for( row = 1; row <= s; row++ )
	{
		for( col = 1; col <= s; col++ )
		{
			ret_trace = ret_trace + sing_eval_poly_on_poly(sg[row,col], a[row,col]);
		}
	}

	return(ret_trace);
}

////////////////////////////////////////////////////////////////////
// sing_trace_table
//
// Assume that d = 1, so that we are dealing with a curve.
//
// Given a basis of the vector space of morphisms of matrix factorisations
// (a,d): (p,q) \lto (p,q) in the stable category, we calculate
// the matrix which represents the nondegenerate bilinear trace form.
//
// INPUT: basis of morphism space, in small form, and the form matrix in small form
//
// OUTPUT: Suppose the morphism space has dimension n and the basis is {e1,...,en}.
// Then the output is an nxn matrix of scalars, whose (i,j) entry is sing_trace(ei * ej).
// Note that this produces a table of the form given for example on p.10 of E6tot.

proc sing_trace_table(list basis, matrix sg)
{
  int matrix_size = ncols(basis[1]);
  int basis_size = size(basis);
  matrix output[basis_size][basis_size];
  int row,col;

  for( row = 1; row <= basis_size; row++ )
  {
    for( col = 1; col <= basis_size; col++ )
    {
      output[row,col] = sing_trace(basis[row] * basis[col], sg);
    }
  }

  return(output);
}

// The same routine, except we take the basis list in block form, and the form matrix in block
// We are still assuming d = 1
proc sing_trace_table_block(list basis, matrix sg_block)
{
	int matrix_size = ncols(basis[1]);
	int basis_size = size(basis);
	matrix output[basis_size][basis_size];
	int row,col;

	for( row = 1; row <= basis_size; row++ )
	{
		for( col = 1; col <= basis_size; col++ )
		{
			output[row,col] = singtrace(basis[row] * basis[col], sg_block);
		}
	}

	return(output);
}

////////////////////////////////////////////////////////////////////
// trace_against_basis
//
// Assume that d = 1, so that we are dealing with a curve.
//
// Given a basis {e1,...,en} of the vector space of morphisms of matrix factorisations
// (p,q) \lto (p,q) in the stable category, and an arbitrary morphism (a,d), we calculate
// the traces of the products li = sing_trace( ei * a ) and return the row matrix {l1,...,ln}.

proc trace_against_basis(matrix endo,list basis, matrix sg)
{
  int basis_size = size(basis);
  matrix retv[1][basis_size];
  int i;
  for(i=1; i<=basis_size; i++)
  {
    retv[1,i] = sing_trace(basis[i] * endo, sg);
  }

  return(retv);
}

// Same as above, but takes the endo, basis and form matrix in block form
proc trace_against_basis_block(matrix endo, list basis, matrix sg)
{
	int basis_size = size(basis);
	matrix retv[1][basis_size];
	int i;
	for(i=1; i<=basis_size; i++)
	{
		retv[1,i] = singtrace(basis[i] * endo, sg);
	}

	return(retv);
}

////////////////////////////////////////////////////////////////////
// coefficients_in_basis
//
// Assume that d = 1, so that we are dealing with a curve.
//
// We are given a basis for the endomorphism space (which is a Frobenius alg)
// and we return 1 if this algebra is commutative, and 0 otherwise

proc is_frobenius_commutative(list basis, matrix sg)
{
	int n = size(basis);
	
	int p = printlevel;
	int i,j;
	int comm = 1;
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
		{
			if( is_endo_stablyzero( basis[i] * basis[j] - basis[j] * basis[i], basis, sg) != 1 )
			{
				dbprint(p, "Elements basis[" + string(i) + "] and basis[" + string(j) + "] do not commute.");
				comm = 0;
				//return(0);
			}
		}
	}
	
	if( comm == 1 ){ dbprint(p, "Algebra is commutative."); }
	return(comm);
}

////////////////////////////////////////////////////////////////////
// is_endo_stablyzero
//
// Assume that d = 1, so that we are dealing with a curve.
//
// Given an endomorphism, given in small format, and a basis and form matrix sg
// (all in small format) returns 1 if the endomorphism is equal in the stable
// category to the zero morphism, and 0 otherwise

proc is_endo_stablyzero(matrix endo1, list basis, matrix sg)
{
	matrix e1 = coefficients_in_basis(endo1,basis,sg);
	matrix z[1][size(basis)];
	
	if( e1 == z ){ return(1); }
	
	return(0);
}

////////////////////////////////////////////////////////////////////
// coefficients_in_basis
//
// Assume that d = 1, so that we are dealing with a curve.
//
// Given a basis {e1,...,en} of the vector space of morphisms of matrix factorisations
// (p,q) \lto (p,q) in the stable category, and an arbitrary morphism (a,d), we calculate
// the coefficient matrix {c1,...,cn} where a = \sum_i c_i e_i (here all morphisms are
// in the small format).
//
// INPUTS: An endomorphism in the small format, a basis in small format, and the form matrix in small format
//
// OUTPUT: A row matrix containing coefficients
//
// REQUIRES "linalg.lib" for inverting the matrices

// As notation, we set <a,a'> = Tr^sg(a' a), so that the output of 
// trace_against_basis is the row matrix ( <\alpha, e1>, ..., <\alpha, en> ).

proc coefficients_in_basis(matrix endo, list basis, matrix sg)
{
  int basis_size = size(basis);
  matrix basis_traces[basis_size][basis_size] = sing_trace_table(basis,sg);
  matrix sing_traces[basis_size][1] = transpose(trace_against_basis(endo,basis,sg));
  matrix result_coeffs[basis_size][1] = inverse(basis_traces) * sing_traces;
  return(transpose(result_coeffs));
}

////////////////////////////////////////////////////////////////////
// remove_duplicates_in_morphismlist
//
// Q = ( 0 & g // f & 0 ) and Q' = ( 0 & g' // f' & 0 ) 
//
// Let (g,f) and (g',f') be matrix factorisations and suppose we are given
// a list of morphisms in the stable category from (g,f) to (g',f'), in the
// vector format. We go through the list looking for vectors which determine
// same morphism in the homotopy category up to sign, and then in each such
// pair we delete one vector.
//
// OUTPUT: A subset of the given list of morphisms which generates the same
// submodule of the Hom space in the stable category of MFs.

proc remove_duplicates_in_morphismlist(list m, matrix f, matrix g, matrix fs, matrix gs)
{
	int p = printlevel;
	dbprint(p,"[remove_duplicates_in_morphismlist]");
	
	dbprint(p,"  Size of initial generating set is " + string(size(m)));
	
	module Ker = MFKer(f,g,fs,gs);
	module Im = MFIm(f,g,fs,gs);
	
	int dim_hom = vdim(std(modulo(Ker,Im)));
	
	dbprint(p,"  Dimension of morphism space is " + string(dim_hom));
	dbprint(p,"");
	
	// We create a new list m_pruned. We loop through morphisms, and at index i we do the following:
	// if neither m[i] nor -m[i] is homotopic to anything in m_pruned, then we do add
	// m[i] to m_pruned
	
	list m_pruned;
	int is_already_on_list;
	
	int i, j;
	for(i=1;i<=size(m);i++)
	{
		is_already_on_list = 0; // Begin by assuming it is not already on the list
		
		for(j=1;j<=size(m_pruned);j++)
		{
			if( reduce(m[i]-m_pruned[j],std(Im)) == 0 || reduce(m[i]+m_pruned[j],std(Im)) == 0 )
			{
				dbprint(p,"     Morphism " + string(i) + " is already on the list at position " + string(j) + ", skipping...");
				is_already_on_list = 1; // We found this morphism already on the list
				break;
			}
		}
		
		if( is_already_on_list == 0 )
		{
			dbprint(p, "   Adding morphism " + string(i) + " to the list.");
			m_pruned = m_pruned + list(m[i]);
		}
	}

	dbprint(p,"");
	dbprint(p,"  Completed duplicate elimination, list now has " + string(size(m_pruned)) + " elements.");
	
	return(m_pruned);	
}

////////////////////////////////////////////////////////////////////
// compute_basis_endospace_vector
//
// Assume d = 1
//
// Given a polynomial W in x,y and a MF (g,f) of W,
// we return a list consisting of a basis of the endomorphism space of (g,f)
//
// INPUT: form matrix sg in small form (for \alpha_1)
// OUTPUT: List of morphisms, in format (Vector).

proc compute_basis_endospace_vector(matrix f, matrix g, matrix sg)
{
	int p = printlevel;
	dbprint(p,"[compute_basis_endospace]");
	
	// Get a list of generators
	list endos = MFcohom(f,g,f,g);

	dbprint(p,"  Size of initial generating set is " + string(size(endos)));

	// The first step is to eliminate in the list "endos" any morphisms which are equal, or
	// differ by a sign
	
	module Ker = MFKer(f,g,f,g);
	module Im = MFIm(f,g,f,g);
	
	int dim_hom = vdim(std(modulo(Ker,Im)));
	
	dbprint(p,"  Dimension of endomorphism space is " + string(dim_hom));
	dbprint(p,"");
	
	// We create a new list endos_pruned. We loop through endos, and at index i we do the following:
	// if neither endos[i] nor -endos[i] is homotopic to anything in endos_pruned, then we do add
	// endos[i] to endos_pruned
	
	list endos_pruned;
	int is_already_on_list;
	
	int i, j;
	for(i=1;i<=size(endos);i++)
	{
		is_already_on_list = 0; // Begin by assuming it is not already on the list
		
		for(j=1;j<=size(endos_pruned);j++)
		{
			if( reduce(endos[i]-endos_pruned[j],std(Im)) == 0 || reduce(endos[i]+endos_pruned[j],std(Im)) == 0 )
			{
				dbprint(p,"     Morphism " + string(i) + " is already on the list at position " + string(j) + ", skipping...");
				is_already_on_list = 1; // We found this morphism already on the list
				break;
			}
		}
		
		if( is_already_on_list == 0 )
		{
			dbprint(p, "   Adding morphism " + string(i) + " to the list.");
			endos_pruned = endos_pruned + list(endos[i]);
		}
	}
	
	endos = endos_pruned;
	
	// so now endos is still a generating set, but hopefully we have eliminated some
	// duplicates, which is important to reduce the time in the recursion step. We now look
	// through all subsets of endos for a basis
	
	dbprint(p,"");
	dbprint(p,"  Completed duplicate elimination, list now has " + string(size(endos)) + " elements.");
	
	dbprint(p,"");
	dbprint(p,"  Beginning recursion to identify subset of list which is a basis.");
	dbprint(p,"");
		
	// We need to take the endomorphism list, and turn it into a form which
	// sing_trace_table can handle. To be precise, we first turn a vector into
	// a block matrix
	list n = list_vectortoblock(endos,ncols(f));

	// And then turn a list of block matrices into a list of their upper left blocks
	list endos_small = list_extractblockmattopleft(n,ncols(f));
	
	list tracking_list;
	int k;
	for(k=1;k<=size(endos);k++){ tracking_list[k] = k; }
	
	list endos_basis_list = compute_basis_endospace_recurse(endos_small, sg, dim_hom, tracking_list);
	
	// The first entry in endos_basis_list is a list of endomorphisms, but formatted in our way,
	// i.e as the first entry in a pair (\alpha_1,\alpha_2). The second element of endos_basis_list
	// is a list of indices, which tell us which elements of our original list endos to take to form
	// the basis

	list tracking_list_selected = endos_basis_list[2];
	list final_basis_list;
	int index_of_selected_endo;
	
	for(k=1;k<=size(tracking_list_selected);k++)
	{
		index_of_selected_endo = tracking_list_selected[k];
		final_basis_list = insert(final_basis_list,endos[index_of_selected_endo],k-1);
	}
	
	return(final_basis_list);
}

proc compute_basis_endospace_block(matrix f, matrix g, matrix sg)
{
	list vector_list = compute_basis_endospace_vector(f, g, sg);
	return(list_vectortoblock(vector_list,ncols(f)));
}

////////////////////////////////////////////////////////////////////
// This routine contains the recursive step of the previous routine.
// We are given a (nonempty) list of endomorphisms, in the form outputed by MFcohom (i.e.
// as vectors rather than matrices), together with the form matrix sg.
//
// If a subset of the list of endomorphisms gives rise, via sing_trace_table, to an invertible
// matrix, then this subset must be linearly independent. We use this observation to find a subset
// of the given list which represents a basis of the cohomology (i.e. stable homs between MFs).
//
// If the trace_table is invertible, then we say that the list of endos "satisfies (*)"
//
// Note that we are given the dimension q of the endomorphism space.
//
//	1. Does the list "endos" satisfy (*)? If so, return it (that is, the list "endos")
//	2. If (*) is not satisfied, then there are two cases:
//	
//		2a. If "endos" has precisely q elements, then return the empty list (it is not possible
//		to find a basis by looking at strict subsets, because they are too small).
//		
//		2b. If "endos" has > q elements, then, supposing endos = {f1,...,fn} run
//		
//			for(i=1;i<=n;i++)
//			{
//				Let l be the list obtained from endos by deleting fi.
//				list ret = compute_basis_endospace_recurse(l,sg,q);
//				If ret is nonempty, then return it
//			}
//			
//			Otherwise, if we fell out of the loop because every q was empty,
//			return the empty list.
//	
// So at the base level, when we run this on any list of endomorphisms, the return result
// will be some subset satisfying (*) with >= q elements, if such a thing exists, and the empty
// sequence otherwise (note that more than one subset satisfying these two conditions may exist,
// and which one is returned is not really defined and not of our concern).

// Assume that "tracking_list" passed in is just a list of integers 1,...,t where t is the size
// of the list "endos"

// NOTE: Actually we return not just the list of endos, but also the tracking_list. So we return a list with two elements: the first is the list of endomorphisms (or an empty list), and the second is the tracking_list.

proc compute_basis_endospace_recurse(list endos, matrix sg, int q, list tracking_list)
{
	int p = printlevel;

	dbprint(p, "   Testing subset {" + string(tracking_list) + "} of size " + string(size(tracking_list)));
	
	list endos_topleft = endos;
	list empty;
	list ret_list;
	
	if(det(sing_trace_table(endos_topleft,sg)) != 0)
	{
		dbprint(p,"    Subset was a basis, returning with success!");
		ret_list = list(endos,tracking_list);
		
		return(ret_list);
	}
	
	if( size(endos) <= q )
	{
		return(list(empty,tracking_list));
	}
	
	int i;
	list trunc_endos;
	list trunc_tracking;

	for(i=1;i<=size(endos);i++)
	{
		trunc_endos = delete(endos,i);
		trunc_tracking = delete(tracking_list,i);
		ret_list = compute_basis_endospace_recurse(trunc_endos,sg,q,trunc_tracking);
		if( size(ret_list[1]) != 0 ){ return(ret_list); }
	}
	
	ret_list = list(empty,tracking_list);
	
	return(ret_list);
}




/////// Various methods of Nils Carqueville ////////////
//
//	See the preprint "Computing BRST-cohomology algorithmically", available on his homepage
	
// TODO: All below should be general, i.e. work with any ring and any polynomial

////////////////////////////////////////////////////////////////////
// blockmat applied to four square matrices A, B, C, D of the same size
// produces the block matrix ( A B // C D )

proc blockmat(matrix block1,matrix block2,matrix block3,matrix block4) 
{ 
	int i,j; 
	int r = ncols(block1); 
	matrix m[2*r][2*r]; 
	for(i=1;i<=r;i++){for(j=1;j<=r;j++){m[i,j]=block1[i,j];}} 
	for(i=1;i<=r;i++){for(j=r+1;j<=2*r;j++){m[i,j]=block2[i,j-r];}} 
	for(i=r+1;i<=2*r;i++){for(j=1;j<=r;j++){m[i,j]=block3[i-r,j];}} 
	for(i=r+1;i<=2*r;i++){for(j=r+1;j<=2*r;j++){m[i,j]=block4[i-r,j-r];}} 
	return(m); 
}

////////////////////////////////////////////////////////////////////
// extractblockmat takes a block matrix (A B // C D) and returns a list {A, B, C, D}
// size is the (square) dimension of A, B, C, D

proc extractblockmat(matrix block, int r)
{
	matrix a[r][r];
	matrix b[r][r];
	matrix c[r][r];
	matrix d[r][r];
	
	int i,j; // i is the row and j the column
	for(i=1;i <= r; i++)
	{
		for(j=1;j <= r; j++)
		{
			a[i,j] = block[i,j];
			b[i,j] = block[i,j+r];
			c[i,j] = block[i+r,j];
			d[i,j] = block[i+r,j+r];
		}
	}
	
	list l = a,b,c,d;
	return(l);
}

////////////////////////////////////////////////////////////////////
// extractblockmattopleft takes a block matrix (A B // C D) and A

proc extractblockmattopleft(matrix block, int r)
{
	list l = extractblockmat(block,r);
	return(l[1]);
}

////////////////////////////////////////////////////////////////////
// list_extractblockmattopleft takes a list of block matrices (A B // C D) and returns a list of As

proc list_extractblockmattopleft(list V, int r)
{
	list M;
	int i;
	
	for(i = 1; i <= size(V); i++)
	{
		M = M + list(extractblockmattopleft(V[i],r));
	}
	
	return(M);
}

////////////////////////////////////////////////////////////////////
// elementinlist checks whether a vector v is an element of a list L.
// If this is the case,  elementinlist(v,L) gives back 1, otherwise the output is 0.

proc elementinlist(vector v, list L) 
{
	int i,n; 
	for(i=1; i<=size(L); i++) 
	{
		if(v == L[i]) { return(1); } 
	}

	return(0); 
}

proc MFKer(matrix f, matrix g, matrix fs, matrix gs) 
{ 
	int i,j,k,l,m,q,s,a,b; 
	int r=ncols(f); 
	matrix A[r*r][r*r]; 
	matrix B[r*r][r*r]; 
	matrix C[r*r][r*r]; 
	matrix D[r*r][r*r]; 
	for(k=1; k<=r; k++) 
	{
		for(i=1; i<=r; i++) 
		{
			for(j=1; j<=r; j++) 
			{
				A[i + k*r - r, j + k*r - r] = - g[j,i]; 
			} 
		} 
	}
	 
	for(k=1; k<=r; k++) 
	{
		for(i=1; i<=r; i++) 
		{
			for(j=1; j<=r; j++) 
			{
				B[k + r*i - r, k + r*j - r] = gs[i,j]; 
			} 
		} 
	}
	 
	for(k=1; k<=r; k++) 
	{
		for(i=1; i<=r; i++) 
		{
			for(j=1; j<=r; j++) 
			{
				C[k + r*i - r, k + r*j - r] = fs[i,j]; 
			} 
		} 
	}
	 
	for(k=1; k<=r; k++) 
	{
		for(i=1; i<=r; i++) 
		{
			for(j=1; j<=r; j++) 
			{
				D[i + k*r - r, j + k*r - r] = - f[j,i]; 
			} 
		}
	} 
	
	module Ker = syz(blockmat(A,B,C,D)); 
	return(Ker); 
}

proc MFIm(matrix f, matrix g, matrix fs, matrix gs) 
{ 
	int i,j,k,l,m,q,s,a,b; 
	int r=ncols(f); 
	matrix A[r*r][r*r]; 
	matrix B[r*r][r*r]; 
	matrix C[r*r][r*r]; 
	matrix D[r*r][r*r]; 
	for(k=1; k<=r; k++) 
	{
		for(i=1; i<=r; i++) 
		{
			for(j=1; j<=r; j++) 
			{
				A[i + k*r - r, j + k*r - r] = - g[j,i]; 
			} 
		} 
	}
	 
	for(k=1; k<=r; k++) 
	{
		for(i=1; i<=r; i++) 
		{
			for(j=1; j<=r; j++) 
			{
				B[k + r*i - r, k + r*j - r] = gs[i,j]; 
			} 
		} 
	}
	 
	for(k=1; k<=r; k++) 
	{
		for(i=1; i<=r; i++) 
		{
			for(j=1; j<=r; j++) 
			{
				C[k + r*i - r, k + r*j - r] = fs[i,j]; 
			} 
		} 
	}
	 
	for(k=1; k<=r; k++) 
	{
		for(i=1; i<=r; i++) 
		{
			for(j=1; j<=r; j++) 
			{
				D[i + k*r - r, j + k*r - r] = - f[j,i]; 
			} 
		}
	} 
	
	module Ker = module(blockmat(-D,B,C,-A)); 
	return(Ker); 
}

////////////////////////////////////////////////////////////////////
// Now one can deﬁne a procedure MFcohom to compute all linearly independent rep- 
// resentatives of a basis of the cohomology between two given matrix factorisations 
//
// Thus if Q = ( 0 & g // f & 0 ) and Q' = ( 0 & gs // fs & 0 ) are two matrix factorisations
// described by  matrices f, g and fs, gs in Singular, respectively, the output of 
// MFcohom(f,g,fs,gs) is a complete list of representatives of the cohomology Hom_MF(Q, Q′ ).
// By construction, the representatives are given as column vectors, but one can 
// easily convert them back into matrices using the procedure list_vectortoblock
//
// Note that the output of MFcohom represent morphisms, but there is no guarantee that these
// morphisms are linearly independent as morphisms IN THE STABLE CATEGORY, i.e. "in cohomology".
// See Nils' paper for the details. The point is that we can tell if two morphisms determine
// the same cohomology class by using the following: suppose f,g,fs,gs are our MF
//
// list morph = MFcohom(f,g,fs,gs);
// module Im = MFIm(f,g,fs,gs);
// module Ker = MFKer(f,g,fs,gs);
//
// Is morph[2] equal to morph[3] in the cohomology?
//
// reduce(morph[2] - morph[3], std(Im));
//
// The result is zero iff. morph[2] and morph[3] are homotopic, i.e. equal in the cohomology.
// In practice the outputs are (usually) not related in some complicated way: they are either linearly
// independent or equal, modulo a sign.

// NOTE 5/12/09 we have gotten ourselves a bit confused. Look at Nils' original paper. What we calculate
// are block matrices A s.t. AQ = Q'A so make sure if you are thinking about morphisms of MFs
// in our notation that it is the same thing.

proc MFcohom(matrix f, matrix g, matrix fs, matrix gs) 
{ 
	int p = printlevel;

	dbprint(p, "[MFcohom]");
		
	dbprint(p, "  Calculating kernel...");
	module Ker = MFKer(f,g,fs,gs); 
	
	dbprint(p, "  Calculating image...");
	module Im = MFIm(f,g,fs,gs); 

	int dim_hom = vdim(std(modulo(Ker,Im)));
	
	dbprint(p,"  Dimension of endomorphism space is " + string(dim_hom));
	dbprint(p,"");

	// We need to create an unknown number of lists, so we use the foo(1) notation for
	// the variables. See the Singular manual Section 3.5.3. We will also make use of the
	// name substituion for variables, in order to refer to foo(i) for a given i.
	
	list colist(1);
	
	// Find those cohomology representatives which are generators of Ker and 
	// populate the list colist(1) with them: 
	int i;
	for(i=1; i<=ncols(Ker); i++) 
	{
		if(reduce(Ker[i],std(Im))!=0) 
		{
			colist(1) = colist(1) + list(Ker[i]); 
		} 
	}
	
	// We now proceed recursively to enumerate further elements of the cohomology
	// as follows: begin with the list colist(1), multiply each of its elements by each
	// ring variable, and accumulate those products which do not belong to Im. Add
	// these products to a list colist(2). Then we proceed to multiply every element
	// of colist(2) by every ring variable, add the resulting products not in Im to
	// colist(3), and so on... continuing in this way we produce:
	//
	// colist(1) = generators of Ker (minus those in Im)
	// colist(2) = generators of Ker multipled by one ring variable (minus Im)
	// colist(3) = generators of Ker multiplied by two ring variables (minus Im)
	// ....
	// colist(j) = generators of Ker multiplied by j-1 ring variables (minus Im)
	//
	// We continue until some colist(j) becomes empty, and then return the union
	// of all the colist(j).
	
	int j = 1; // The j indexes the colists, as described above
	
	// Note that colist(j) for arbitrary j do not begin this loop as defined variables,
	// but the algorithm is such that by the time colist(j) is tested in the while
	// statement, it will be defined.
	
	// NOTE: Singular's language is such that variables defined inside a block have global scope.
	int l;
	vector product;
	list total_list = colist(1); // Singular assignments are by-copy not by-ref, so don't panic
	
	while( size(colist(j)) != 0 )
	{
		list colist(j+1);
		
		dbprint(p, "  Enumerating colist(" + string(j+1) + "). Currently have " + string(size(total_list)) + " morphisms in total.");  
		
		for(l = 1; l <= nvars(basering); l++)
		{
			dbprint(p, "    ... variable l=" + string(l) + " of " + string(nvars(basering)));
			
			// Multiply each element of colist(j) by the ring variable var(l), and if
			// the product is not in Im, and is not already on the list, add it to colist(j+1)
			for(i = 1; i <= size(colist(j)); i++)
			{
				product = var(l) * colist(j)[i];
				
				if( elementinlist(product, colist(j+1)) != 1 )
				{
					if( reduce(product, std(Im)) != 0 )
					{
						colist(j+1) = colist(j+1) + list(product);
						total_list = total_list + list(product);
					}
				}
			}
			
		}
		
		j++;
	}

	return(total_list);
}

// MFcohom calculates a list of morphisms in the form of column vectors, but we
// sometimes prefer to return a list of matrices of the form (a & 0\\ 0 & d). This is
// done by MFcohom_block below.

// If you want a list consisting just of the top left matrices a in the blocks, then
// run list_extractblockmattopleft on the output of Mfcohom_block

proc MFcohom_block(matrix f, matrix g, matrix fs, matrix gs)
{
	list l = MFcohom(f,g,fs,gs);
	list n = list_vectortoblock(l,ncols(f));
	return(n);
}


////////////////////////////////////////////////////////////////////
// MFtensorF and MFtensorG
//
// Given matrix factorisations Q, Q' of the form Q = (0 & g\\ f & 0) and
// Q' = (0 & g'\\ f' & 0) then the tensor product is some third matrix
// factorisation Z = (0 & G \\ F & 0 ) where
//
// G is the output of MFtensorG(f,g,f',g') and 
// F is the output of MFtensorF(f,g,f',g')
// NEEDS matrix.lib

proc MFtensorF(matrix f, matrix g, matrix fs, matrix gs) 
{ 
	int i,j; 
	int r=ncols(f); 
	int rs=ncols(fs); 
	matrix m[2*r*rs][2*r*rs]; 
	for(i=1; i<=r*rs; i++) 
	{
		for(j=1; j<=r*rs; j++) 
		{
			m[i,j] = tensor(f,unitmat(rs))[i,j]; 
		} 
	} 

	for(i=1; i<=r*rs; i++) 
	{
		for(j=1; j<=r*rs; j++) 
		{
			m[i,j + r*rs] = tensor(unitmat(r),fs)[i,j]; 
		} 
	} 

	for(i=1; i<=r*rs; i++) 
	{
		for(j=1; j<=r*rs; j++) 
		{
			m[i + r*rs,j] = tensor(unitmat(r),gs)[i,j]; 
		} 
	} 

	for(i=1; i<=r*rs; i++) 
	{
		for(j=1; j<=r*rs; j++) 
		{
			m[i + r*rs,j + r*rs] = - tensor(g,unitmat(rs))[i,j]; 
		} 
	}
	 
	return(m); 
}

proc MFtensorG(matrix f, matrix g, matrix fs, matrix gs)
{ 
	int i,j; 
	int r=ncols(f); 
	int rs=ncols(fs); 
	matrix m[2*r*rs][2*r*rs]; 

	for(i=1; i<=r*rs; i++) 
	{
		for(j=1; j<=r*rs; j++) 
		{
			m[i,j] = tensor(g,unitmat(rs))[i,j]; 
		} 
	}
	 
	for(i=1; i<=r*rs; i++) 
	{
		for(j=1; j<=r*rs; j++) 
		{
			m[i,j + r*rs] = tensor(unitmat(r),fs)[i,j]; 
		} 
	}
	 
	for(i=1; i<=r*rs; i++) 
	{
		for(j=1; j<=r*rs; j++) 
		{
			m[i + r*rs,j] = tensor(unitmat(r),gs)[i,j]; 
		} 
	}
	 
	for(i=1; i<=r*rs; i++) 
	{
		for(j=1; j<=r*rs; j++) 
		{
			m[i + r*rs,j + r*rs] = - tensor(f,unitmat(rs))[i,j]; 
		} 
	} 

	return(m); 
}







///////// OLD (MAYBE NOT TRUSTWORTHY) STUFF USING NON-BLOCK MORPHISMS /////////


////////////////////////////////////////////////////////////////////
// Given a, print coefficient_in_basis(a * e1, basis, sg) on row 1, then the same with a * e2 on row 2, etc.

proc print_coefficients_of_products_in_basis(matrix endo, list basis, matrix sg)
{
  int basis_size = size(basis);
  int i;
  for( i = 1; i <= basis_size; i++ )
  {
    print("Row " + string(i) + ": " + string(coefficients_in_basis(basis[i] * endo, basis, sg)));
  }
}









//////// DEPRECATED ////////

////////////////////////////////////////////////////////////////////
// Let f be a polynomial (in some ring) and m a monomial in the ring variables.
// Then moncoef returns the coefficient (from the base field) of the given monomial
// in the given polynomial

proc moncoef(poly f, poly m)
{
	// First form a product of all the ring variables
	int i;
	
	poly vars = 1;
	for(i=1;i<= nvars(basering);i++)
	{
		vars = vars * var(i);
	}
	
	matrix c = coef(f, vars);
	int cols = ncols(c);

	for(i=1; i <= cols; i++)
	{
		if( c[1,i] == m ){ return(c[2,i]); }
	}

	// If the monomial was not found, it does not occur, so return zero
	return(0);
}


// This was Nils' original algorithm, to which we have made some changes. We
// preserve the original here for reference.
proc MFcohom_old_preserved(matrix f, matrix g, matrix fs, matrix gs) 
{ 
	int p = printlevel;

	dbprint(p, "[MFcohom]");
	
	int i,j,k,l,m,q,s,a,b; 
	int r = ncols(f); 
	dbprint(p, "  Calculating kernel...");
	module Ker = MFKer(f,g,fs,gs); 
	dbprint(p, "  Calculating image...");
	module Im = MFIm(f,g,fs,gs); 

	// Define convenient lists and lists of lists to be used below. More lists 
	// would correspond to higher levels as explained below and will not be 
	// relevant in computable examples of interest. 
	list list1,list2,list3,list4,list5,list6,list7,list8,list9,list10; 
	list colist1,colist2,colist3,colist4,colist5,colist6,colist7,colist8,colist9, colist10; 
	list liste=list1,list2,list3,list4,list5,list6,list7,list8,list9,list10; 
	list coliste=colist1,colist2,colist3,colist4,colist5,colist6,colist7,colist8,colist9,colist10; 
	list colist; 

	// Find those cohomology representatives which are generators of Ker and 
	// populate the list colist with them: 
	for(i=1; i<=ncols(Ker); i++) 
	{
		if(reduce(Ker[i],std(Im))!=0) 
		{
			colist = colist + list(Ker[i]); 
		} 
	}
	 
	// Find those cohomology representatives which are generators of Ker 
	// multiplied by exactly one variable, add them to the list colist and 
	// populate the list coliste[1] with them: 
	int n = size(colist); 
	for(j=1; j<=nvars(basering); j++) 
	{ 
		for(i=1; i<=n; i++) 
		{
			if(reduce(var(j)*colist[i],std(Im))!=0) 
			{
				colist = colist + list(var(j)*colist[i]);
				coliste[1] = coliste[1] + list(var(j)*colist[i]); 
			} 
		} 
	} 

	// Find those cohomology representatives which are generators of Ker 
	// multiplied by more than one variable, add them to the list colist and 
	// populate the associated lists coliste[j+1]. The lists liste[j] are used 
	// in order not to count elements more than once. The loop stops after 
	// level j iff there are no representatives at level j. 

	for(j=1; size(coliste[j])!=0; j++) 
	{ 
		dbprint(p, "  Variable j=" + string(j) + ". Current total of " + string(size(colist)) + " morphisms");
		
		for(l=1; l<=nvars(basering); l++) 
		{
			dbprint(p, "    ... variable l=" + string(l) + " of " + string(nvars(basering)));
			for(i=1; i<=size(coliste[j]); i++) 
			{
				dbprint(p, "    Loop iteration " + string(i) + " / " + string(size(coliste[j])) + " and size of liste is " + string(size(liste[j+1])));
				if(elementinlist(var(l)*coliste[j][i],liste[j+1])!=1) 
				{
					if(reduce(var(l)*coliste[j][i],std(Im))!=0) 
					{
						liste[j+1] = liste[j+1] + list(var(l)*coliste[j][i]); 
						coliste[j+1] = coliste[j+1] + list(var(l)*coliste[j][i]); 
						colist = colist + list(var(l)*coliste[j][i]); 
					} 
				} 
			} 
		} 
	} 

	return(colist); 
}