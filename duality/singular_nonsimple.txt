Example session for non-simple curve singularity
================================================

LIB "homolog.lib";
LIB "linalg.lib";
LIB "dualitytrace.lib";
ring S = 0,(x,y),dp;

printlevel = 1;
number lambda = 1; // nonzero

matrix phi[2][2] = x2 - lambda * y5, xy, xy + lambda^2 * y4, -lambda * x + y2;
matrix psi[2][2] = x - (1/lambda) * y2, (1/lambda) * xy, (1/lambda) * xy + lambda * y4, -(1/lambda) * x2 + y5;
matrix sg_coeff[2][2] = -1/(3 * lambda) * y4 + (lambda/3)*xy, -1/(3 * lambda) * xy3 - 1/3 * lambda^2 * xy2, 1/3 * x, 1/(3 * lambda) * y4 - (lambda/3) * xy;

// The Kapustin-Li trace is
matrix sg_block[4][4] = 9 * lambda * xy - 4/lambda * y4, -4/lambda * xy3 - 2y5 - 8 * lambda^2 * xy2, 0, 0, 10x, 4/lambda * y4 - 9 * lambda * xy, 0, 0, 0, 0, -4/lambda * y4 + lambda * xy, 10x + 16 * lambda * y2, 0, 0, -2y5 - 4/lambda * xy3, 4/lambda * y4 - lambda * xy;
sg_block = 1/42 * sg_block;

list basis_pre = compute_basis_endospace_block(psi,phi,sg_coeff);
list basis = list_extractblockmattopleft(basis_pre,ncols(phi));

// On p.6 of nsimp we calculated an endomorphism for lambda = 1, let us discover
// what it is in the above basis
matrix beta[2][2] = 0, -xy2 - y5, y2 + y3, -y3 + 2y4;
print(coefficients_in_basis(beta,basis,sg_coeff));
// From this we learn that beta is -basis[5]

// Now let us compare traces from our formula and Kapustin-Li
int i;
for(i=1;i<=6;i++){
print(string(i) + ". The sg trace is " + string(sing_trace(basis[i],sg_coeff)) + " and the KL trace is " + string(singtrace(basis_pre[i], sg_block)));
}

print("Determinant for sg: " + string(det(sing_trace_table(basis,sg_coeff))));
print("Determinant for KL: " + string(det(sing_trace_table_block(basis_pre,sg_block))));

// You can compare them at different lambdas, they always agree as far as I can see

// Check if the algebra is commutative (it is)
is_frobenius_commutative(basis,sg_coeff);

// Check that both traces vanish on the image, i.e. on null-homotopic morphisms
module Im = MFIm(psi,phi,psi,phi);

matrix ma, topleft;
list blocks;
for(i=1;i<=8;i++)
{
	ma = vectortoblock(Im[i],2);
	blocks = extractblockmat(ma,2);
	topleft = blocks[1];
	print("KL trace = " + string(singtrace(ma,sg_block)) + " sg trace = " + string(sing_trace(topleft,sg_coeff)));
}


matrix sg_block[4][4] = 9 * lambda * xy - 4/lambda * y4, -4/lambda * xy3 - 2y5 - 8 * lambda^2 * xy2, 0, 0, 10x, 4/lambda * y4 - 9 * lambda * xy, 0, 0, 0, 0, -4/lambda * y4 + lambda * xy, 10x + 16 * lambda * y2, 0, 0, -2y5 - 4/lambda * xy3, 4/lambda * y4 - lambda * xy;
sg_block = 1/42 * sg_block;

// Testing an alternative form matrix, see p.9 of nsimple
matrix sg_block_alt[4][4] = -3/lambda * y4 + 4*lambda*xy, -2/lambda * xy3 -y5 - 4 * lambda^2 * xy2, 0,0,5x,1/lambda * y4 - 5 * lambda * xy, 0, 0, 0, 0, lambda * xy - 1/lambda * y4, 5x + 8 * lambda * y2, 0, 0, y5 - 2/lambda * xy3, 3/lambda * y4;
sg_block_alt = 1/21 * sg_block_alt;

int i;
for(i=1;i<=6;i++)
{
	print("KL trace = " + string(singtrace(basis_pre[i],sg_block)) + " and new KL trace = " + string(singtrace(basis_pre[i],sg_block_alt)));
}