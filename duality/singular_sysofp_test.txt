Routines for testing for systems of parameters
==============================================

// Given a polynomial f(x_1,x_2,x_3,...,x_n) we test to
// see if for some i the sequence \partial_1 f, \ldots, \partial_n f
// with \partial_i f replaced by f, is a system of parameters

// At the moment we assume S = 0,(x,y,z),ds;

proc sysofp(poly f)
{
	ideal I = diff(f,x),diff(f,y),diff(f,z);

	// If the singularity is not isolated, return
	if( dim(std(I)) != 0 )
	{
	print("Singularity is not isolated.");
	return();
	}

	ideal Iz = diff(f,x),diff(f,y),f;
	ideal Iy = diff(f,x),f,diff(f,z);
	ideal Ix = f, diff(f,y),diff(f,z);

	int hz = 3 - dim(std(Iz));
	int hy = 3 - dim(std(Iy));
	int hx = 3 - dim(std(Ix));

	int hcount = 0;

	if( hx != 3 ){ hcount++;}
	if( hy != 3 ){ hcount++;}
	if( hz != 3 ){ hcount++;}

	if( hcount <= 1 )
	{
	print("At most one was not a sys of p.");
	return();}

	// So, something interesting is happening

	print("Polynomial is " + string(f));
	if( hx != 3 ){ print("(f, d_y f, d_z f) is NOT a system of parameters"); }
	if( hy != 3 ){ print("(d_x f, f, d_z f) is NOT a system of parameters"); }
	if( hz != 3 ){ print("(d_x f, d_y f, f) is NOT a system of parameters"); }
	if( hcount == 3 ){ print("----------------!!------------------------"); }
	
	print("");
}

proc trypolysys
{
	poly f;

	int c1; // coeff of x2
	int c2; // coeff of y2
	int c3; // coeff of z2
	int c4; // coeff of xy
	int c5; // coeff of xz
	int c6; // coeff of yz

	int d1; // coeff of x3
	int d2; // coeff of y3
	int d3; // coeff of z3
	int d4; // coeff of xyz
	int d5; // coeff of x2y
	int d6; // coeff of xy2
	int d7; // coeff of xz2
	int d8; // coeff of x2z
	int d9; // coeff of y2z

	for(c1 = 0;c1<=1;c1++)
	{
	for(c2 = 0;c2 <= 1; c2++)
	{
	for(c3 = 0; c3 <= 1; c3++)
	{
	for(c4 = 0; c4 <= 1; c4++)
	{
	for(c5 = 0; c5 <= 1; c5++)
	{
	for(c6 = 0; c6 <= 1; c6++)
	{
	for(d1 = 0; d1 <= 1; d1++)
	{
	for(d2 = 0; d2 <= 1; d2++)
	{
	for(d3 = 0; d3 <= 1; d3++)
	{
	for(d4 = 0; d4 <= 1; d4++)
	{
	for(d5 = 0; d5 <= 1; d5++)
	{
	for(d6 = 0; d6 <= 1; d6++)
	{
	for(d7 = 0; d7 <= 1; d7++)
	{
	for(d8 = 0; d8 <= 1; d8++)
	{
	for(d9 = 0; d9 <= 1; d9++)
	{
	f = c1 * x2 + c2 * y2 + c3 * z2 + c4 * xy + c5 * xz + c6 * yz + d1 * x3 + d2 * y3 + d3 * z3 + d4 * xyz + d5 * x2y + d6 * xy2 + d7 * xz2 + d8 * x2z + d9 * y2z;
	sysofp(f);
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
}	

proc randompoly
{
	int i1 = random(2,3);
	int i2 = random(2,3);
	int i3 = random(2,3);
	
	poly g = random(0,1)*x**i1 + random(-1,1)*y**i2 + random(-1,1)*z**i3;
	
	int j1 = random(1,3);
	int j2 = random(1,3);
	int j3 = random(1,3);
	
	poly h = random(-1,1)*(x**j1) * (y**j2) * (z**j3);
	
	int k1 = random(1,3);
	int k2 = random(1,3);
	int k3 = random(1,3);
	int k4 = random(1,3);
	int k5 = random(1,3);
	int k6 = random(1,3);
	int k7 = random(1,3);
	
	poly s = random(0,1) * (x**k1) * (y**k2) + random(0,1) * (x**k3) * (z**k4) + random(0,1) * (y**k5) * (z**k6);
	
	poly f = g + h + s;
	return(f);
}