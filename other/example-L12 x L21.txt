option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
int nx=2;
ring rr=0,(x(1..nx)),dp;
minpoly = rootofUnity(5);
poly minpolyblow = (x(1)^4+x(1)^3+x(1)^2+x(1)+1);
int N = 4; // The N in sl(N) link homology
printlevel = 0;

poly Wx1 = x(1)^5;
poly Wx2 = x(2)^5;

matrix D1 = mfIdentityDefect( Wx2,  Wx1,  x(2),  x(1) );
matrix D2 = mfIdentityDefect( Wx1,  Wx2,  x(1),  x(2) );

// The internal algebra is defined by the ideal J
ideal J = x(1)^N, x(2)^N;
intvec q = N, N;
number Nn = N + 1;
matrix C = 1/Nn * unitmat(2);

// Compute the ordinary tensor product, which is a two-periodic complex:
matrix D = MFtensor(D1,D2);
print(D*D);

// Inflate or blow up the differential on this tensor product:
matrix Dblow = mablow(D,J);

// Reduce this inflated differential:
list l = mfReduce(Dblow,1);
matrix RD = l[1];
matrix F = l[2]; // A homotopy equivalence F: Dblow -> RD
matrix G = l[3]; // A homotopy equivalence G: RD -> Dblow

// The idempotent e is given by
//
//  e = (-1)^(nx choose 2) * det(C) * partial_int(D1) * partial_int(D2) * delta(D)

matrix diff2 = ZZtensor( unitmat(ncols(D1)), diff(D2, x(1)) );
matrix diff1 = ZZtensor( diff(D1, x(2)), unitmat(ncols(D2)) );

matrix iddQ = mablow( det(C) * diff1 * diff2, J );
matrix delQ = deltaQ(D,q);

// And finally the idempotent e on Dblow
int sign = (nx * (nx-1)) div 2;
matrix e = -1 * (-1)^(sign) * iddQ * delQ;
matrix z[ncols(e)][ncols(e)];
print((e * Dblow - Dblow * e)==z);

// The induced idempotent on the reduction is denoted ep
matrix ep = F * e * G;
matrix zn[ncols(ep)][ncols(ep)];
print((ep * RD - RD * ep)==zn); // ep is at least a morphism

// ep is an idempotent on the nose
print((ep * ep - ep)==zn); 

matrix ep0 = extractblockmat(ep)[1];
matrix ep1 = extractblockmat(ep)[4];

print(mat_rk(ep0)); 
print(mat_rk(ep1));

