//////////////////////////////////////////////////////////////////////////////////////
// EXAMPLE M1 - Checking nature of idempotents
//////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "matrix.lib";
int nx=1;
int ny=1;
ring rr=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(5);
poly minpolyblow = x(1)^4+x(1)^3+x(1)^2+x(1)+1;

int d = 5;
poly W = x(1)^d;

int m = 1;
int a = 1;

// Define T and P
matrix T[2][2] = 0, x(1)^a, x(1)^(d-a), 0;
matrix P[2][2] = 0, (y(1) - r^m * x(1)) * (y(1) - r^(m+1) * x(1)), (y(1)^d - x(1)^d)/((y(1) - r^m * x(1)) * (y(1) - r^(m+1) * x(1))), 0;

list t = varTrans(W);
matrix C = t[2];
intvec q = t[1];

// The ideal whose quotient gives the algebra I is generated by the internal
// variables to the powers given by q
int i;
ideal J;
for( i = 1; i <= nx; i++ )
{
    J[i] = x(i)^(q[i]);
}

matrix D = MFtensor(P,T);
matrix Dblow = mablow(D,J);
list l = mfReduce(Dblow,1);
matrix RD = l[1];
matrix F = l[2]; // A homotopy equivalence F: Dblow -> RD
matrix G = l[3]; // A homotopy equivalence G: RD -> Dblow

matrix dq = dQ(T, q, C);
matrix iddQ = ZZtensor( unitmat(ncols(P)), dq );
matrix delQ = deltaQ(D, q);
matrix e = iddQ * delQ;
matrix e2 = delQ * iddQ;

// Neither delQ or iddQ is an endomorphism of Dblow.
// e2 is an endomorphism of Dblow

// The induced idempotent on the reduction
matrix ep = F * e * G;
matrix ep2 = F * e2 * G;

// Both ep and ep2 are idempotent on the nose
ep * ep == ep;
ep2 * ep2 == ep2;

// Moreover these are orthogonal idempotents
ep + ep2 == unitmat(4);
ep * ep2 == zeromat(4);
ep2 * ep == zeromat(4);

matrix final = mfSuspend( mfSplitIdempotent(RD, ep), nx );
matrix final2 = mfSuspend( mfSplitIdempotent(RD, ep2), nx);

print(final);
print(final2);

// According to (6.36) of [Brunner/Roggenkamp 0707.0922], P x T should be isomorphic to
// T2 := (0, y(1)^2 // y(1)^3, 0). And indeed, if we define




// Example:  defect action on brane in Kazama-Suzuki model

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "ring.lib";
int nx=2;
int ny=2;
ring RRR=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(8);
poly minpolyblow = x(1)^4 + 1;

// Define W both in x- and in y-variables:

poly Wx = x(1)^4+x(2)^4;
poly Wy = y(1)^4-4*y(1)^2*y(2)+2*y(2)^2;

// Define "effective action" of D1 x Dy on Q:

matrix Q[2][2] = 0, x(1)^2 + r^4 * x(2)^2 - (1 + r^2) *r* x(1) * x(2), 
                      x(1)^2 + r^4 * x(2)^2 - ((1 + r^6)/r) * x(1) * x(2), 0;
    
// Define remaining defect:

poly Ja=y(1)-x(1)-x(2);
poly Jb=y(2)-x(1)*x(2);
poly Ea=(y(1)+x(1)+x(2))*(y(1)^2-4*y(2)+(x(1)+x(2))^2);
poly Eb=-4*x(1)^2-6*x(1)*x(2)-4*x(2)^2+2*y(2);
matrix D[4][4]=
    0,0,Ja,Eb,
    0,0,Jb,-Ea,
    Ea,Eb,0,0,
    Jb,-Ja;

// Define DQ := D x Q (and check that it is a MF of Wy):

matrix DQ = MFtensor(D,Q);
print( DQ * DQ - Wy * unitmat(8) );

list l = fuseDefects(D, Q, Wx);
matrix RD = l[1]; // Reduced inflation of Y x X
matrix ep = l[2]; // Idempotent endomorphism of RD
print(ep * ep - ep); // is ep is an idempotent "on the nose"?

matrix final = mfSuspend( mfSplitIdempotent(RD, ep), nx );
print(final);

// Check that this really is a MF: 

print( final * final - Wy * unitmat(4) );
