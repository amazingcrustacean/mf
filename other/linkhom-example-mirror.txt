///////////////////////////////////////////////////////
// KR homology of mirror links and orientation on webs
///////////////////////////////////////////////////////

//////////////
// Trefoil
//////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "linkhom.lib";

// First take the usual right handed trefoil
intvec edgevec(1) = 2,1,3,4;
intvec edgevec(2) = 4,3,5,6;
intvec edgevec(3) = 6,5,1,2;
intvec vertexParity = -1,-1,-1;
list link1 = vertexParity, list(edgevec(1),edgevec(2),edgevec(3));    

// Now the same link with the same labels but with the orientations reversed
intvec edgevec(1) = 3,4,2,1;
intvec edgevec(2) = 5,6,4,3;
intvec edgevec(3) = 1,2,6,5;
list link2 = vertexParity, list(edgevec(1),edgevec(2),edgevec(3));

int numVar = linkNumberOfVariables(link1);
ring rr=0,(x(1..numVar)),dp;
int N = 3;
int p = linkParity(link1);

// The aim is to compile the same states in both links and compare the results
list stateDiagrams = powervec(size(link1[1]));
int i;
for(i=1;i<=size(stateDiagrams);i++)
{
    intvec s = stateDiagrams[i];
    print("State [" + string(s) + "]");
    
    list web1 = webFromLink(link1, s, N);
    list web2 = webFromLink(link2, s, N);
    
    list h1 = webCompile(web1, defaultCompStratForWeb(web1));
    list h2 = webCompile(web2, defaultCompStratForWeb(web2));
    
    if( h1[2 + p] == h2[2+p] )
    {
        print(string(h1[2+p]));
        print("    test passed.");
    }
    else
    {
        print(string(h1[2+p]));
        print(string(h2[2+p]));
        print("    test failed.");
    }
}

// Now compare the actual KR homology

// The left handed trefoil
intvec edgevec(1) = 1,2,4,3;
intvec edgevec(2) = 3,4,6,5;
intvec edgevec(3) = 5,6,2,1;
list link3 = intvec(1,1,1), list(edgevec(1),edgevec(2),edgevec(3));