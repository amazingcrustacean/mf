/////////////////////////////////////////////////////
// TESTS
//
// Verify that the code produces the right invariants
/////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "linkhom.lib";

list linkData = linkLibrary("trefoil"); // e.g. trefoil, 6_1, 6_2, see linkhom.lib/linkLibrary
int numVar = linkNumberOfVariables(linkData); // number of ring variables required
ring rr=0,(x(1..numVar)),dp; // we work over the ring Q[x(1),...,x(numVar)]
int N = 2; // The N in sl(N) link homology

list h = linkCompile(linkData, "./test-1", N); // Output data constructs to temp
list cp = KRcomplex(linkData, h, N); // Compute KR complex from compilation h

ring ss=(0,t,q),(x),dp; // Switch to a ring with parameters t,q for Poincare polynomial

list cp = imap(rr,cp);
list cohom = computeCohomology(cp);
number poincare = gradedPoincare(cohom, q, t);
poincare; // KR homology, encoded as the Poincare polynomial

if( poincare != (q9+q5t+q3t3+qt3)/(t3) )
{
    print("TEST 1: Failed.");
}
else
{
    print("TEST 1: Passed.");
}

ring rr=0,(x(1..numVar)),dp;
list h = linkCompileReduced(linkData, "./test2", N, x(1), 1);
list cp = KRcomplex(linkData, h, N);

ring ss=(0,t,q),(x),dp;

list cp = imap(rr,cp);
list cohom = computeCohomology(cp);
number poincare = gradedPoincare(cohom, q, t);
poincare; // reduced KR homology, encoded as the Poincare polynomial

if( poincare != (t3q2+tq6+q8)/(t3) )
{
    print("TEST 2: Failed.");
}
else
{
    print("TEST 2: Passed.");
}