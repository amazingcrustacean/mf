// Defects using adjoint matrices

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "mfweb.lib";
ring rr=0,(x,y),dp;
printlevel=1;

// 	Fusion of boundary condition with defect
//
//    defect X --- x ---> defect Y ---- y ---->
//
// We construct MFs of W = y^n - x^n by constructing a matrix
// Y0 with determinant W. Then with Y1 = adjoint matrix of Y0 we have
// Y0 * Y1 = det(Y0) = W.

int n = 5;
int a = 2;
int b = 1;
int c = 1;

matrix X[2][2] = 0, x^a, x^(n-a), 0;
matrix Y0[2][2] = y^b, x^(n-c), x^c, y^(n-b);
matrix Y1 = adjoint(Y0);
matrix Y = blockmat(matrix(0,2,2),Y1,Y0,matrix(0,2,2));

list e1 = list(1,2,list(x),x^n);
list e2 = list(2,0,list(y),y^n);
list web = list(2, list(e1,e2), list(X,Y));

list compStrat = list(1,2), list(x);
list L = webCompilePair(web, compStrat);
def fusion = L[1];

chernChar(Y);
print(chernChar(mfIdentityDefect(y^n,x^n,y,x)));

// The defect n = 4, b = 2, c = 3 is interesting. It has the property that
//
//      Y * (x,x3) = (y2,y2) + (y2,y2)
//      Y * (x2,x2) = (y2,y2) + (y2,y2)

// Defect n = 5, b = 2, c = 3
//
//      Y * (x,x4) = (y3,y2) + (y2,y3)
//      Y * (x2,x3) = (y2,y3) + (y2,y3) + (y3,y2) + (y3,y2)