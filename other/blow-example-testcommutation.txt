/////////////////////////////////////////////////////////////////////////////////////////
// Example TC1 - Various checks for properties of the idempotent e
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Part TK0: Treat the Gamma0-resolution of the crossing. The relevant web has three vertices,
// two of which are "marks" in the KR terminology and one of which is the "null crossing"
// where the crossing has been removed. Reading from left to right on the diagram "OO" we
// index these vertices by 3, 1, 2 and orient the edges as KR do, towards the top of the
// page. The variables are x(1),x(2),x(3),x(4), with the first two outgoing from the null
// crossing and the latter two incoming.
//
// The vertices 2,3 are decorated by the appropriate identity defects, and 1 is decorated
// by the tensor product of two identity defects.
//
// Note with this indexing the sign factor B is +1.

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
int nx=4;
ring rr0=0,(x(1..nx)),dp;
int N = 2; // The N in sl(N) link homology

////////// ONLY PASTE ONE OF THE FOLLOWING, i.e. A or B ///////////

////////// SECTION A ///////////
matrix D1a = mfIdentityDefect( x(1)^(N+1), x(4)^(N+1), x(1), x(4) );
matrix D1b = mfIdentityDefect( x(2)^(N+1), x(3)^(N+1), x(2), x(3) );
matrix D1 = MFtensor(D1b, D1a);
matrix D2 = mfIdentityDefect( x(3)^(N+1), x(2)^(N+1), x(3), x(2) );
matrix D3 = mfIdentityDefect( x(4)^(N+1), x(1)^(N+1), x(4), x(1) );
////////// END SECTION A /////////

////////// SECTION B ///////////
matrix D1 = mfWideEdge( x(1), x(2), x(3), x(4), N);
matrix D2 = mfIdentityDefect( x(3)^(N+1), x(2)^(N+1), x(3), x(2) );
matrix D3 = mfIdentityDefect( x(4)^(N+1), x(1)^(N+1), x(4), x(1) );
////////// END SECTION B /////////

// The internal algebra is defined by the ideal J
ideal J = x(1)^N, x(2)^N, x(3)^N, x(4)^N;
intvec q = N, N, N, N;
number Nn = N + 1;
matrix C = 1/Nn * unitmat(4);

matrix D = MFtensor(D1, MFtensor(D2,D3));
matrix Dblow = mablow(D,J);

// Reduce this inflated differential:
list l = mfReduce(Dblow,1);
matrix RD = l[1];
matrix F = l[2]; // A homotopy equivalence F: Dblow -> RD
matrix G = l[3]; // A homotopy equivalence G: RD -> Dblow

// The idempotent e is given by
//
//  e = (-1)^(nx choose 2) * det(C) * partial(D1) * partial(D2) * partial(D3) * delta(D)

matrix diff1 = ZZtensor( diff(D1, x(1)) * diff(D1,x(2)), unitmat(ncols(D2)*ncols(D3)) );
matrix diff2 = ZZtensor( unitmat(ncols(D1)), ZZtensor( diff(D2,x(3)), unitmat(ncols(D3))) );
matrix diff3 = ZZtensor( unitmat(ncols(D1)), ZZtensor( unitmat(ncols(D2)), diff(D3,x(4))));
matrix iddQ = mablow( det(C) * diff1 * diff2 * diff3, J );

// Compute the idempotent e and its reduction ep using the full "determinant"
// style sum for deltaQ
matrix delQ = deltaQ(D,q);
int sign = (nx * (nx-1)) div 2;
matrix e = (-1)^(sign) * iddQ * delQ; 
matrix z[ncols(e)][ncols(e)];
print((e * Dblow - Dblow * e)==z);
matrix ep = F * e * G;
matrix zn[ncols(ep)][ncols(ep)];
print((ep * RD - RD * ep)==zn); // ep is at least a morphism
print((ep * ep - ep)==zn); 

// Now we give a bunch of different computations of deltaQ, not using the determinant
// but just one of the summands.
int n = dimAlgebraOverInternalVariables(J);
int gg = ncols(D) * n;
int j;    
matrix Mi[gg][gg];
list deltas; 
for(j = 1; j <= nx; j++)
{
    deltas[j] = mablow_delta(D, j, q[j], J);
}

list delQalts;
delQalts[1] = deltas[1] * deltas[2] * deltas[3] * deltas[4];
delQalts[2] = -deltas[2] * deltas[1] * deltas[3] * deltas[4];
delQalts[3] = -deltas[1] * deltas[2] * deltas[4] * deltas[3];
delQalts[4] = deltas[1] * deltas[4] * deltas[2] * deltas[3];

list ealts, epalts;
for(j = 1; j <= 4; j++)
{
    ealts[j] = (-1)^(sign) * iddQ * delQalts[j]; 
    epalts[j] = F * ealts[j] * G;
    print("Index " + string(j) + " tests (" + string(ealts[j] * Dblow == Dblow * ealts[j])
    + "," + string(epalts[j] * RD == RD * epalts[j])
    + "," + string(epalts[j] * epalts[j] == epalts[j]) + ")");
}

// The idempotents e do not agree on the nose (they may be homotopic)
e == ealts[1];
e == ealts[2];
e == ealts[3];
e == ealts[4];

// But all the reduced idempotents agree with the original
ep == epalts[1];
ep == epalts[2];
ep == epalts[3];
ep == epalts[4];


/////////////////////////////////////////////////////////////////////////////////////////
// Testing cancellation for residue calculation. Example taken from Kazama-Suzuki

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "ring.lib";
int nx=2;
int ny=2;
ring RRR=(0,r),(x(1..nx),y(1..ny)),dp;
minpoly = rootofUnity(8);
poly minpolyblow = x(1)^4 + 1;

poly W = x(1)^4+x(2)^4;

// Define "effective action" of D1 x Dy on Q:
matrix Q[2][2] = 0, x(1)^2 + r^4 * x(2)^2 - (1 + r^2) *r* x(1) * x(2), 
                      x(1)^2 + r^4 * x(2)^2 - ((1 + r^6)/r) * x(1) * x(2), 0;
                      
print( Q * Q == W * unitmat(2) );

// Jacobian ideal
ideal J = diff(W,x(1)), diff(W,x(2));

// Compute the Chern character of Q
poly chern = supertrace( diff(Q,x(1)) * diff(Q,x(2)) );

diff(Q,x(1)) * diff(Q,x(2));
diff(Q,x(2)) * diff(Q,x(1));
diff(Q,x(1)) * diff(Q,x(2)) + diff(Q,x(2)) * diff(Q,x(1)); // They do not anticommute, not even mod J
supertrace( diff(Q,x(1)) * diff(Q,x(2)) + diff(Q,x(2)) * diff(Q,x(1)) ); // Is zero.

// Note that the following supertrace is nonzero, but belongs to the jacobi ideal
poly t = supertrace( diff(Q,x(1)) * diff(Q,x(2)) * diff(Q,x(1)) * diff(Q,x(2)) );
t;
reduce(t,std(J));

/////////////////////////////////////////////////////////////////////////////////////////
// Testing cancellation for residue calculation. Example taken from KR homology

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
int nx=4;
int ny=0;
ring rr1=0,x(1..nx),dp;

int N=2;

poly W = x(1)^(N+1) + x(2)^(N+1) - x(3)^(N+1) - x(4)^(N+1);
matrix D = mfWideEdge( x(1), x(2), x(3), x(4), N);
print( D * D - W * unitmat(4) );

// Jacobian ideal
ideal J = x(1)^N, x(2)^N, x(3)^N, x(4)^N;

// Compute the chern character
poly chern = supertrace( diff(D,x(1)) * diff(D,x(2)) * diff(D,x(3)) * diff(D,x(4)) );
reduce(chern, std(J));

// Note that if we discard the nondiagonal entries, the top left block of
// d1 d2 d3 d4 + d2 d1 d3 d4 agrees with the bottom right block. So the traces agree
// for the simplest possible reason.

poly t = supertrace( diff(D,x(1)) * diff(D,x(2)) * diff(D,x(3)) * diff(D,x(4)) * diff(D,x(1)) * diff(D,x(2)) );
t;
reduce(t, std(J));

// When we quote the results of examples, we write d1 d2 d3 d4
// to mean str( diff(D,x(1)) * diff(D,x(2)) * diff(D,x(3)) * diff(D, x(4)) ).

// For example d1 d2 d3 d4 d1 d2 is nonzero but zero mod J
// whereas d1 d2 d3 d4 d4 d1 is already zero.
// d1 d2 d3 d4 d3 d4 is another one which is nonzero but zero mod J
// NOTE: d1 d2 d3 d4 d3 d3 is NONZERO even mod J. So it certainly doesn't hold if you have
// repeated indices within the second permutation.
// But it doesn't always fail: for example d1 d2 d4 d4 d1 d2 is zero.
// Also d1 d1 d3 d4 d1 d2 is nonzero mod J.

// Now let's output the results in a systematic way
list S = SGroupintvecs(4);
list T = SGroupintvecs(2);

int i,j, k;

for(i=1; i<=size(S); i++)
{
    for(j=1; j<=size(T); j++)
    {
        intvec perm1 = S[i];
        intvec perm2 = T[j];
        matrix Ma = (-1)^(LengthSymElement(perm1)) * unitmat(4);

        for(k=1; k<=4; k++)
        {
            Ma = Ma * diff(D,x(perm1[k]));
        }

        poly oc = supertrace( Ma );
        
        Ma = Ma * (-1)^(LengthSymElement(perm2));
        for(k=1; k<=2; k++)
        {
            Ma = Ma * diff(D,x(perm2[k]));
        }
        
        poly c = supertrace(Ma);

        print("Permutation (" + string(perm1) + "), (" + string(perm2) + ")");
        print("    Chern  = " + string(oc)); // Usual chern char, just using the first permutation
        print("    repeat = " + string(c)); // Supertrace of product of six derivatives
        print("   reduced = " + string(reduce(c,std(J)))); // Reduced of previous
        print("");
    }
}

// Note all permutations of 1 2 3 4 give the same Chern character polynomial, not just equal
// mod J. Probably this is unavoidable as the Chern character has degree 2 and all the generators
// of J have degree 2, and are quadratic in individual variables?








/////////////////////////////////////////////////////////////////////////////////////////
// Example TC2
/////////////////////////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
int nx=4;
ring rr0=0,(x(1..nx)),dp;
int N = 2; // The N in sl(N) link homology

////////// ONLY PASTE ONE OF THE FOLLOWING, i.e. A or B ///////////

////////// SECTION A ///////////
matrix D1a = mfIdentityDefect( x(1)^(N+1), x(4)^(N+1), x(1), x(4) );
matrix D1b = mfIdentityDefect( x(2)^(N+1), x(3)^(N+1), x(2), x(3) );
matrix D1 = MFtensor(D1b, D1a);
matrix D2 = mfIdentityDefect( x(3)^(N+1), x(2)^(N+1), x(3), x(2) );
matrix D3 = mfIdentityDefect( x(4)^(N+1), x(1)^(N+1), x(4), x(1) );
////////// END SECTION A /////////

////////// SECTION B ///////////
matrix D1 = mfWideEdge( x(1), x(2), x(3), x(4), N);
matrix D2 = mfIdentityDefect( x(3)^(N+1), x(2)^(N+1), x(3), x(2) );
matrix D3 = mfIdentityDefect( x(4)^(N+1), x(1)^(N+1), x(4), x(1) );
////////// END SECTION B /////////

// The internal algebra is defined by the ideal J
ideal J = x(1)^N, x(2)^N, x(3)^N, x(4)^N;
intvec q = N, N, N, N;
number Nn = N + 1;
matrix C = 1/Nn * unitmat(4);

matrix D = MFtensor(D1, MFtensor(D2,D3));
matrix Dblow = mablow(D,J);

// Reduce this inflated differential:
list l = mfReduce(Dblow,1);
matrix RD = l[1];
matrix F = l[2]; // A homotopy equivalence F: Dblow -> RD
matrix G = l[3]; // A homotopy equivalence G: RD -> Dblow

// The idempotent e is given by
//
//  e = (-1)^(nx choose 2) * det(C) * partial(D1) * partial(D2) * partial(D3) * delta(D)

matrix diff1 = ZZtensor( diff(D1, x(1)) * diff(D1,x(2)), unitmat(ncols(D2)*ncols(D3)) );
matrix diff2 = ZZtensor( unitmat(ncols(D1)), ZZtensor( diff(D2,x(3)), unitmat(ncols(D3))) );
matrix diff3 = ZZtensor( unitmat(ncols(D1)), ZZtensor( unitmat(ncols(D2)), diff(D3,x(4))));
matrix iddQ = mablow( det(C) * diff1 * diff2 * diff3, J );

// The blown up matrix will be of dimension n x ncols(f)
matrix delta1 = mablow_delta( D, 1, q[1], J );
matrix delta2 = mablow_delta( D, 2, q[2], J );
matrix delta3 = mablow_delta( D, 3, q[3], J );
matrix delta4 = mablow_delta( D, 4, q[4], J );

// Compute the idempotent e and its reduction ep
matrix e = iddQ * delta1 * delta2 * delta3 * delta4;
//matrix e2 = - iddQ * delta2 * delta1 * delta3 * delta4;
//matrix es = mablow( det(C) * diff1, J ) * delta2 - mablow( det(C) * diff2, J ) * delta1 + delta1 * delta2 + mablow( det(C) * diff1 * diff2, J );
matrix ew = iddQ * mablow( diff1 * diff2 * diff3, J ); // Strange that this is still a morphism
matrix ewp = F * ew * G;

e * Dblow == Dblow * e;
matrix ep = F * e * G;
ep * RD == RD * ep;
ep * ep == ep;