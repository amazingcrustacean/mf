////////////////////////////////////////////////////////////////////
// Benchmarking mfReduce
////////////////////////////////////////////////////////////////////

option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
LIB "control.lib";
printlevel = 1;

// Define a 512x512 reducible matrix A using the savefile
def R = loadFromMPfile("./data/mfreduce-bench-512.mp");
setring R;

// The matrix A is now a highly non-reduced matrix
list B = mfReduce(A,1);
list C = mfReduceSparse(A,1);

// Original performance (with no printing output) 52360ms
// After introducing findConstant 28470ms
// Doing columns before rows made no appreciable difference.
// Replacing if by double if gives 27380ms (but this may not be significant)
// The "clever" findConstant gives 128660ms.
// Using the findConstant which looks at odd rows then even rows, we get 23420ms.
// Find constant with a cutoff of 10 gives 19190ms.
// Other tweaks gets us down to 17410ms.
// Other shaving gives 17320ms.
// With gauss_row we get 16930ms.

// First attempt at mfReduceSparse takes 52 seconds. Doh.

// blow-mfreduce-bench-data-small contains a 64x64 matrix 
option(noredefine);option(noloadLib);option(redSB);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
LIB "control.lib";
printlevel = 1;

// Load a 64x64 reducible matrix bb over the ring with y(1),..,y(4).
def R = loadFromMPfile("./data/mfreduce-bench-64.mp");
setring R;

list Blist = mfReduce(bb,1);
list Clist = mfReduceSparse(bb,1);