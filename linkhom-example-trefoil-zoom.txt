// Trefoil ///////////////////////////////////////////
//
// Also 3_1. See http://katlas.org/wiki/The_Rolfsen_Knot_Table.

option(noredefine);option(noloadLib);option(redSB);//option(prot);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
LIB "control.lib";
LIB "mfweb.lib";
ring rr=0,(x(1..6)),dp;
int N = 2; // The N in sl(N) link homology
printlevel = 1;

list trefoilLink = linkLibrary("trefoil");
list h = linkCompile(trefoilLink, "./data/trefoil-N" + string(N) + "-zoom.mp", N);
list cp = KRcomplex(trefoilLink, h, N);

ring ss=(0,t,q),(x),dp;

list cp = imap(rr,cp);
list cohom = computeCohomology(cp);
number euler = gradedEuler(cohom,q);
euler;

// The KR homology is described by its Poincare polynomial
number poincare = gradedPoincare(cohom, q, t);
poincare;

// Jones polynomial: -q9 + q5 + q3 + q

// KR invariants /////////////////////

// N = 2 (q9+q5t+q3t3+qt3)/(t3)
// agrees with the data on the Knot Atlas.

// N = 3 (q14+q12+q8t+q6t3+q6t+q4t3+q2t3)/(t3)
// agrees with Gukov-Schwarz-Vafa (GSV).

// N = 4 (q19+q17+q15+q11t+q9t3+q9t+q7t3+q7t+q5t3+q3t3)/(t3) 
// (103 seconds) agrees with GSV.

// N = 5 (q24+q22+q20+q18+q14t+q12t3+q12t+q10t3+q10t+q8t3+q8t+q6t3+q4t3)/(t3)
// (176 seconds) agrees with GSV.

// N = 6 (t3q15+t3q13+t3q11+t3q9+t3q7+t3q5+tq17+tq15+tq13+tq11+tq9+q29+q27+q25+q23+q21)/(t3)
// (state 8 took 3325 seconds).



// Reduced KR homology computations

option(noredefine);option(noloadLib);option(redSB);//option(prot);
LIB "blow.lib";
LIB "linkhom.lib";
LIB "matrix.lib";
LIB "mfweb.lib";
ring rr=0,(x(1..6)),dp;
int N = 2; // The N in sl(N) link homology
printlevel = 1;

list trefoilLink = linkLibrary("trefoil");
list compStrat = list(1,2,3),list(x(1),x(2),x(3),x(4),x(5),x(6));

list web000 = webFromLink(trefoilLink, intvec(0,0,0), N);
//list D = webCompile(web000,compStrat); // dim 4 in degree zero

// Now do the same computation by hand
matrix X(1) = web000[3][1];
intvec Xgr(1) = web000[4][1];
matrix X(2) = web000[3][2];
intvec Xgr(2) = web000[4][2];
matrix X(3) = web000[3][3];
intvec Xgr(3) = web000[4][3];
matrix X = MFtensor(MFtensor(X(1),X(2)),X(3));
intvec Xgr = MFtensorGradings(MFtensorGradings(Xgr(1),Xgr(2)),Xgr(3));

int i;
for(i=1; i<=2; i++)
{
    matrix h(i) = 1/3 * diff(X(1),x(i));
    matrix H(i) = ZZtensor(ZZtensor(h(i),unitmat(ncols(X(2)))),unitmat(ncols(X(3))));
    
    matrix h(i+2) = 1/3 * diff(X(2),x(i+2));
    matrix H(i+2) = ZZtensor(ZZtensor(unitmat(ncols(X(1))),h(i+2)),unitmat(ncols(X(3))));
    
    matrix h(i+4) = 1/3 * diff(X(3),x(i+4));
    matrix H(i+4) = ZZtensor(ZZtensor(unitmat(ncols(X(1))),unitmat(ncols(X(2)))),h(i+4));
}

for(i=1; i<=6; i++)
{
    H(i) * X + X * H(i) == x(i)^2 * unitmat(ncols(X));
}

list D = mfPushforwardInductive(X, list(x(1),x(2),x(3),x(4),x(5),x(6)), list(2,2,2,2,2,2), list(H(1),H(2),H(3),H(4),H(5),H(6)), Xgr);
// If you print D[2],D[3] you see that we get the same results as from webCompile

// Now substitute x(1) = 0 in all the MFs and try again
for(i=1; i<=3; i++)
{
    matrix Y(i) = subst(X(i),x(1),0);
    intvec Ygr(i) = Xgr(i);
}

for(i=1; i<=6; i++)
{
    matrix G(i) = subst(H(i),x(1),0);
}

matrix Y = MFtensor(MFtensor(Y(1),Y(2)),Y(3));
intvec Ygr = MFtensorGradings(MFtensorGradings(Ygr(1),Ygr(2)),Ygr(3));

for(i=2; i<=6; i++)
{
    G(i) * Y + Y * G(i) == x(i)^2 * unitmat(ncols(Y));
}

// mfPushforwardInductive is fed homotopies between the action of x(i)^2 and 0, for 1 <= i <= 6
list D = mfPushforwardInductive(Y, list(x(2),x(3),x(4),x(5),x(6)), list(2,2,2,2,2), list(G(2),G(3),G(4),G(5),G(6)), Ygr);
print(D[1]);

// The compilation is a MF of zero, rank two in each degree, with zero differentials.
// We get the same result if we switch to the ring 0,(x(2..6)),dp beforehand